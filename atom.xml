<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>猫也の博客</title>
  
  
  <link href="https://anbyss.github.io/atom.xml" rel="self"/>
  
  <link href="https://anbyss.github.io/"/>
  <updated>2022-07-28T09:21:41.880Z</updated>
  <id>https://anbyss.github.io/</id>
  
  <author>
    <name>猫也</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://anbyss.github.io/2022/07/24/%E4%BD%9C%E4%B8%9A%E7%BD%91%E5%9D%80/"/>
    <id>https://anbyss.github.io/2022/07/24/%E4%BD%9C%E4%B8%9A%E7%BD%91%E5%9D%80/</id>
    <published>2022-07-24T11:34:00.940Z</published>
    <updated>2022-07-28T09:21:41.880Z</updated>
    
    <content type="html"><![CDATA[<p><strong>靳蕊：<a href="https://gitee.com/jr-Yvette/">https://gitee.com/jr-Yvette/</a></strong><br><strong>吕祥悦：</strong><br><strong>徐利容：<a href="https://godx06.github.io/">https://godx06.github.io/</a></strong><br><strong>龚莫言：<a href="https://gitee.com/gong0502">https://gitee.com/gong0502</a></strong><br><strong>莫晓筠：<a href="https://gitee.com/mmxxj/zuoye">https://gitee.com/mmxxj/zuoye</a></strong><br><strong>王建飞：<a href="https://gitee.com/wang-jianfei555/android">https://gitee.com/wang-jianfei555/android</a></strong><br><strong>文淑倩：<a href="https://github.com/is-freesia?tab=repositories">https://github.com/is-freesia?tab=repositories</a></strong><br><strong>文鑫强：<a href="https://gitee.com/wen-xinqiang/dashboard/projects">https://gitee.com/wen-xinqiang/dashboard/projects</a></strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;靳蕊：&lt;a href=&quot;https://gitee.com/jr-Yvette/&quot;&gt;https://gitee.com/jr-Yvette/&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;吕祥悦：&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;徐利容：&lt;a hr</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java Web</title>
    <link href="https://anbyss.github.io/2022/04/02/Java%20Web/"/>
    <id>https://anbyss.github.io/2022/04/02/Java%20Web/</id>
    <published>2022-04-02T07:24:00.000Z</published>
    <updated>2022-04-02T09:56:39.854Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-Web开发概述"><a href="#Java-Web开发概述" class="headerlink" title="Java Web开发概述"></a>Java Web开发概述</h1><h2 id="Web相关概念"><a href="#Web相关概念" class="headerlink" title="Web相关概念"></a>Web相关概念</h2><p><strong>Web程序</strong>：由服务器、客户端浏览器、网络组成。</p><p><strong>胖客户端程序（RCP）</strong>：也叫桌面程序，参考QQ、Word、PS等等软件。<br><strong>瘦客户端程序（TCP）</strong>：一般是Web程序，不用安装，上网就能用，参考网页。</p><p>按照<strong>是否需要访问网络</strong>程序分为：网络程序和非网络程序。</p><p><strong>网络程序</strong>又分为：B/S结构和C/S结构。</p><p><strong>B/S</strong>是指浏览器/服务器模式，一般网站是B/S结构，比如Google，Baidu。<br><strong>C/S</strong>是指客户端/服务器模式，一般网络程序是C/S结构，比如QQ、迅雷。</p><h2 id="Web开发背景知识"><a href="#Web开发背景知识" class="headerlink" title="Web开发背景知识"></a>Web开发背景知识</h2><h3 id="Web访问基本原理（浏览器和Web服务器的交互关系）"><a href="#Web访问基本原理（浏览器和Web服务器的交互关系）" class="headerlink" title="Web访问基本原理（浏览器和Web服务器的交互关系）"></a>Web访问基本原理（浏览器和Web服务器的交互关系）</h3><p>（1）用户打开浏览器，输入网站的URL地址（网址）<br>（2）浏览器找到指定主机后，向Web服务器发出请求（request）<br>（3）Web服务器接收处理请求，生成处理结果，大多是HTML格式，也有其他格式<br>（4）服务器把响应的结果返回给浏览器<br>（5）浏览器接收对应结果并显示，比如Web页面</p><h3 id="HTTP超文本传输协议（浏览器和Web服务器交互的桥梁）"><a href="#HTTP超文本传输协议（浏览器和Web服务器交互的桥梁）" class="headerlink" title="HTTP超文本传输协议（浏览器和Web服务器交互的桥梁）"></a>HTTP超文本传输协议（浏览器和Web服务器交互的桥梁）</h3><p>HTTP协议的客户/服务器模式的信息交换过程（4个过程）：<br><strong>建立连接</strong>:连接的建立是通过申请套接字(Socket）实现的。客户打开一个套接字并把它约束在一个端口上，如果成功，就相当于建立了一个虚拟文件。以后就可以在该虚拟文件上写数据并通过网络向外传送。<br><strong>发送请求</strong>:打开一个连接后，客户机把请求消息送到服务器的停留端口上，完成提出请求动作。HTTP/1.0请求消息的格式为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请求消息=请求行(通用信息|请求头|实体头) CRLF[实体内容]</span><br><span class="line">请求  行=方法  请求URL HTTP版本号  CRLF</span><br><span class="line">方    法=GET|HEAD|POST|扩展方法</span><br><span class="line">URL=协议名称+宿主名+目录与文件名请求行中的方法描述指定资源中应该执行的动作,常用的方法有GET、HEAD和POST</span><br></pre></td></tr></table></figure><p><strong>发送响应</strong>:服务器在处理完客户的请求之后，要向客户机发送响应消息。HTTP/1.0的响应消息格式如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">响应消息=状态行(通用信息头|响应头|实体头)  CRLF  (实体内容)</span><br><span class="line">状 态 行=HTTP版本号  状态码  原因叙述</span><br></pre></td></tr></table></figure><p>状态码表示响应类型<br>1:保留;<br>2:表示请求成功地接收;<br>3:完成请求客户需进一步细化请求;<br>4:客户错误;<br>5:服务器错误。</p><p>响应头的信息包括:服务程序名，通知客户请求的 URL 需要认证，请求的资源何时能使用。</p><p><strong>关闭连接</strong>:客户和服务器双方都可以通过关闭套接字来结束TCP/IP对话。</p><h3 id="Web浏览器"><a href="#Web浏览器" class="headerlink" title="Web浏览器"></a>Web浏览器</h3><p>目前,有很多 Web浏览器,但是比较普及和流行的为Microsoft公司的Internet Explorer(IE)和 Mozilla基金会的Firefox浏览器。这两个浏览器都能很好地支持最新、最好的HTML表示标准，以及各种HTML扩展功能。另外，它们也都能支持JavaScript脚本语言以及类似Applet的 Java小程序运行。<br>其他的浏览器还有傲游浏览器（Maxthon)、腾讯TT浏览器、Opera，以及Google最新推出的谷歌浏览器（Chrome）)等。</p><h3 id="Web服务器"><a href="#Web服务器" class="headerlink" title="Web服务器"></a>Web服务器</h3><p>在服务器端，与通信相关的处理都是由服务器软件负责，这些服务器软件都由第三方的软件厂商提供，<strong>开发人员只需要把功能代码部署在Web服务器中，客户端就可以通过浏览器访问到这些功能代码</strong>，从而实现向客户提供的服务，下面简单介绍常用的服务器。<br><strong>IIS</strong>是微软提供的一种 Web服务器，提供对 ASP 语言的良好支持，通过插件的安<br>装，也可以提供对PHP语言的支持。</p><p><strong>Apache</strong>服务器是由Apache基金组织提供的一种Web服务器，其特长是处理静态页面，对于静态页面的处理效率非常高。</p><p><strong>Tomcat</strong>也是Apache基金组织提供的一种Web服务器，提供对JSP和 Servlet的支持，通过插件的安装，同样可以提供对 PHP语言的支持，但是Tomcat 只是一个轻量级的Java Web容器，像EJB这样的服务在Tomcat中是不能运行的。</p><p><strong>JBoss</strong>是一个开源的重量级的Java Web服务器，在JBoss 中，提供对J2EE 各种规范的良好支持，而且 JBoss通过了Sun公司J2EE认证，是Sun公司认可的J2EE容器。</p><p>另外J2EE 的服务器还有BEA 的 <strong>Weblogic</strong>和 IBM的<strong>WebSphere</strong>等，适合大型的商业应用。这些产品的性能都是非常优秀的，可以提供对J2EE的良好支持。用户可以根据自己的需要选择合适的服务器产品。</p><h1 id="搭建Java-Web开发环境"><a href="#搭建Java-Web开发环境" class="headerlink" title="搭建Java Web开发环境"></a>搭建Java Web开发环境</h1><p>开发工具包JDK、集成开发环境IDE、Java服务器</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java-Web开发概述&quot;&gt;&lt;a href=&quot;#Java-Web开发概述&quot; class=&quot;headerlink&quot; title=&quot;Java Web开发概述&quot;&gt;&lt;/a&gt;Java Web开发概述&lt;/h1&gt;&lt;h2 id=&quot;Web相关概念&quot;&gt;&lt;a href=&quot;#Web相关概</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Material Design实战</title>
    <link href="https://anbyss.github.io/2021/09/30/Material%20Design%E5%AE%9E%E6%88%98/"/>
    <id>https://anbyss.github.io/2021/09/30/Material%20Design%E5%AE%9E%E6%88%98/</id>
    <published>2021-09-30T13:45:58.713Z</published>
    <updated>2021-10-16T11:54:22.618Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Material-Design"><a href="#Material-Design" class="headerlink" title="Material Design"></a>Material Design</h1><p><strong>Material Design是界面设计语言</strong>，用于解决Android平台界面风格不统一的问题</p><h1 id="Toolbar"><a href="#Toolbar" class="headerlink" title="Toolbar"></a>Toolbar</h1><p>（1）打开res/values/styles.xml文件<br>AppTheme的parent主题通常有<strong>Theme.AppCompat.NoActionBar</strong>和<strong>Theme.AppCompat.Light.NoActionBar</strong>这两种主题不带ActionBar的主题<br>（2）在主活动的布局里加上Toolbar控件<br>Android Studio 2.2版本的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;android.support.v7.widget.Toolbar</span><br><span class="line">        android:id=&quot;@+id/toolbar&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;?attr/actionBarSize&quot;</span><br><span class="line">        android:background=&quot;?attr/colorPrimary&quot;</span><br><span class="line">        android:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span><br><span class="line">        app:popupTheme=&quot;@style/ThemeOverlay.AppCompat.Light&quot;</span><br><span class="line">        /&gt;</span><br></pre></td></tr></table></figure><p>Android Studio 3.5.2版本的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;androidx.appcompat.widget.Toolbar</span><br><span class="line">       android:id=&quot;@+id/toolbar&quot;</span><br><span class="line">       android:layout_width=&quot;match_parent&quot;</span><br><span class="line">       android:layout_height=&quot;?attr/actionBarSize&quot;</span><br><span class="line">       android:background=&quot;?attr/colorPrimary&quot;</span><br><span class="line">       android:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span><br><span class="line">       app:popupTheme=&quot;@style/ThemeOverlay.AppCompat.Light&quot;</span><br><span class="line">       /&gt;</span><br></pre></td></tr></table></figure><p>**!!!**3.5.2版本的这个控件在第三版的书中有写到，但是是另一种语言写的程序，与v4,v7的依赖包里的控件不适配<br>（3）修改MainActivity<br>1.获取实例<br><code>setContentView(R.layout.activity_main);</code><br><code>Toolbar toolbar = (Toolbar)findViewById(R.id.toolbar);</code><br>2.传入实例<br><code>setSupportActionBar(toolbar);</code><br>（4）修改标题栏上的文字内容<br>在AndroidManifest.xml中在activity中增加一个android:label的属性，默认为应用名称<br><code>android:label=&quot;Fruits&quot;</code><br>（5）添加action按钮<br>1.准备图片<br>2.在res中创建一个menu的文件夹，在这个文件夹里创建一个toolbar.xml文件<br>3.toolbar.xml的具体代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&gt;</span><br><span class="line">    &lt;item</span><br><span class="line">        android:id=&quot;@+id/backup&quot;</span><br><span class="line">        android:icon=&quot;@drawable/ic_backup&quot;</span><br><span class="line">        android:title=&quot;Backup&quot;</span><br><span class="line">        app:showAsAction=&quot;always&quot; /&gt;</span><br><span class="line">    &lt;item</span><br><span class="line">        android:id=&quot;@+id/delete&quot;</span><br><span class="line">        android:icon=&quot;@drawable/ic_delete&quot;</span><br><span class="line">        android:title=&quot;Delete&quot;</span><br><span class="line">        app:showAsAction=&quot;ifRoom&quot;/&gt;</span><br><span class="line">    &lt;item</span><br><span class="line">        android:id=&quot;@+id/settings&quot;</span><br><span class="line">        android:icon=&quot;@drawable/ic_settings&quot;</span><br><span class="line">        android:title=&quot;Settings&quot;</span><br><span class="line">        app:showAsAction=&quot;never&quot;/&gt;</span><br><span class="line">&lt;/menu&gt;</span><br></pre></td></tr></table></figure><p>可以看到，我们通过<item>标签来定义action按钮<br>android:id用于指定按钮的id<br>android:icon用于指定按钮的图标<br>android:title用于指定按钮的文字<br>app:showAsAction用来指定按钮的显示位置<br><strong>使用app命名空间是为了能够兼容低版本的系统</strong><br>showAsAction主要有以下几种值可选:<br>always表示永远显示在Toolbar中，如果屏幕空间不够则不显示<br>ifRoom表示屏幕空间足够的情况下显示在Toolbar中，不够的话就显示在菜单当中;<br>never则表示永远显示在菜单当中。<br><strong>Toolbar中的action按钮只会显示图标，菜单中的action按钮只会显示文字</strong><br>（6）修改MainActivity中的代码<br>1.在onCreateOptionsMenu方法中加载toolbar.xml菜单文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public boolean onCreateOptionsMenu(Menu menu)&#123;</span><br><span class="line">    getMenuInflater().inflate(R.menu.toolbar,menu);</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.在onOptionsItemSelected方法中处理各个按钮的点击事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public boolean onOptionsItemSelected (MenuItem item) &#123;</span><br><span class="line">    switch (item.getItemId()) &#123;</span><br><span class="line">        case R.id.backup:</span><br><span class="line">            Toast.makeText(this, &quot;You clicked Backup&quot;, Toast.LENGTH_SHORT).</span><br><span class="line">                    show();</span><br><span class="line">            break;</span><br><span class="line">        case R.id.delete:</span><br><span class="line">            Toast.makeText(this, &quot;You clicked Delete&quot; ,Toast.LENGTH_SHORT).</span><br><span class="line">                    show() ;</span><br><span class="line">            break;</span><br><span class="line">        case R.id.settings:</span><br><span class="line">            Toast.makeText(this, &quot;You clicked Settings&quot;, Toast.LENGTH_SHORT).</span><br><span class="line">                    show();</span><br><span class="line">            break;</span><br><span class="line">        default:</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="滑动菜单"><a href="#滑动菜单" class="headerlink" title="滑动菜单"></a>滑动菜单</h1><h2 id="DrawerLayout"><a href="#DrawerLayout" class="headerlink" title="DrawerLayout"></a>DrawerLayout</h2><p>（1）添加DrawerLayout控件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;android.support.v4.widget.DrawerLayout</span><br><span class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br><span class="line">    android:id=&quot;@+id/drawer_layout&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;</span><br><span class="line">    &gt;</span><br><span class="line">&lt;/android.support.v4.widget.DrawerLayout&gt;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>DrawerLayout的子控件必须指定layout_gravity属性，left滑动菜单就在左边。<br>（2）为使用户意识到有滑动菜单，建议添加一个导航按钮<br>1.添加一张导航按钮的图在drawable-xxhdpi目录下<br>2.获取DrawerLayout的实例<br><code>DrawerLayout mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);</code><br>3.接着调用ActionBar的setDisplayHomeAsUpEnabled()方法显示导航按钮<br>4.又调用ActionBar的setHomeAsUpIndicator()方法设置一个导航按钮图标</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ActionBar actionBar = getSupportActionBar();</span><br><span class="line">            if (actionBar != null) &#123;</span><br><span class="line">                actionBar.setDisplayHomeAsUpEnabled(true);</span><br><span class="line">                actionBar.setHomeAsUpIndicator(R.drawable.ic_menu);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>5.接着在onOptionsItemSelected方法中调用openDrawer()方法将滑动菜单展示出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public boolean onOptionsItemSelected(MenuItem item) &#123;</span><br><span class="line">            switch (item.getItemId()) &#123;</span><br><span class="line">                case android.R.id.home:</span><br><span class="line">                    mDrawerLayout.openDrawer(GravityCompat.START);</span><br><span class="line">                    break;</span><br></pre></td></tr></table></figure><h2 id="NavigationView"><a href="#NavigationView" class="headerlink" title="NavigationView"></a>NavigationView</h2><p>（1）添加依赖<br><code>compile &#39;com.android.support:design:24.2.1&#39;</code><br><code>compile &#39;de.hdodenhof:circleimageview:2.1.0&#39;</code><br>（2）准备menu和headerlayout<br>1.menu（用来显示具体的菜单项）<br>在res下新建一个menu的文件夹，创建一个nav_menu.xml文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</span><br><span class="line">    &lt;group android:checkableBehavior=&quot;single&quot;&gt;//single表示组中所有的菜单项只能单选</span><br><span class="line">        &lt;item</span><br><span class="line">            android:id=&quot;@+id/call&quot;//菜单项id</span><br><span class="line">            android:icon=&quot;@drawable/nav_call&quot;//菜单项图标</span><br><span class="line">            android:title=&quot;Call&quot;/&gt;//菜单项显示的文字</span><br><span class="line">        &lt;item</span><br><span class="line">            android:id=&quot;@+id/friends&quot;</span><br><span class="line">            android:icon=&quot;@drawable/nav_friends&quot;</span><br><span class="line">            android:title=&quot;Friends&quot; /&gt;</span><br><span class="line">        &lt;item</span><br><span class="line">            android:id=&quot;@+id/location&quot;</span><br><span class="line">            android:icon=&quot;@drawable/nav_location&quot;</span><br><span class="line">            android:title=&quot;Location&quot;/&gt;</span><br><span class="line">        &lt;item</span><br><span class="line">            android:id=&quot;@+id/mail&quot;</span><br><span class="line">            android:icon=&quot;@drawable/nav_mail&quot;</span><br><span class="line">            android:title=&quot;Mail&quot; /&gt;</span><br><span class="line">        &lt;item</span><br><span class="line">            android:id=&quot;@+id/task&quot;</span><br><span class="line">            android:icon=&quot;@drawable/nav_task&quot;</span><br><span class="line">            android:title=&quot;Tasks&quot; /&gt;</span><br><span class="line">    &lt;/group&gt;</span><br><span class="line"></span><br><span class="line">&lt;/menu&gt;</span><br></pre></td></tr></table></figure><p>2.headerlayout（用来显示头部布局，可以随意定制）<br>在layout文件夹下新建一个nav_header.xml文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:padding=&quot;10dp&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;180dp&quot;</span><br><span class="line">    android:background=&quot;?attr/colorPrimary&quot;&gt;</span><br><span class="line">    &lt;de.hdodenhof.circleimageview.CircleImageView//图片圆形化控件</span><br><span class="line">        android:id=&quot;@+id/icon_image&quot;</span><br><span class="line">        android:layout_width=&quot;70dp&quot;</span><br><span class="line">        android:layout_height=&quot;70dp&quot;</span><br><span class="line">        android:src=&quot;@drawable/nav_icon&quot;</span><br><span class="line">        android:layout_centerInParent=&quot;true&quot;/&gt;</span><br><span class="line">    &lt;TextView//用于显示用户名</span><br><span class="line">        android:id=&quot;@+id/username&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_alignParentBottom=&quot;true&quot;</span><br><span class="line">        android:text=&quot;tonygreendev@gmail.com&quot;</span><br><span class="line">        android:textColor=&quot;#FFF&quot;</span><br><span class="line">        android:textSize=&quot;14sp&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">    &lt;TextView//用于显示邮箱地址</span><br><span class="line">        android:id=&quot;@+id/mail&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_above=&quot;@id/username&quot;</span><br><span class="line">        android:text=&quot;Tony Green&quot;</span><br><span class="line">        android:textColor=&quot;#FFF&quot;</span><br><span class="line">        android:textSize=&quot;14sp&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">&lt;/RelativeLayout&gt;</span><br></pre></td></tr></table></figure><p>（3）添加NavigationView控件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;android.support.design.widget.NavigationView</span><br><span class="line">        android:id=&quot;@+id/nav_view&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;match_parent&quot;</span><br><span class="line">        android:layout_gravity=&quot;start&quot;</span><br><span class="line">        app:menu=&quot;@menu/nav_menu&quot;//添加menu</span><br><span class="line">        app:headerLayout=&quot;@layout/nav_header&quot;//添加headerlayout</span><br><span class="line">        /&gt;</span><br></pre></td></tr></table></figure><p>（4）添加点击事件<br>1.找到NavigationView的实例<br>2.调用setCheckedItem方法将Call菜单项设置为默认选中<br>3.接着调用setNavigationItemSelectedListener方法设置一个菜单项选中事件的监听器，当用户点击任意菜单时会回调到OnNavigationItemSelectedListener()方法中<br>4.调用closeDrawers()方法将滑动菜单关闭</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">navView.setCheckedItem(R.id.call);</span><br><span class="line">navView.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean onNavigationItemSelected(MenuItem item) &#123;</span><br><span class="line">        mDrawerLayout.closeDrawers();</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="悬浮按钮和可交互提示"><a href="#悬浮按钮和可交互提示" class="headerlink" title="悬浮按钮和可交互提示"></a>悬浮按钮和可交互提示</h1><h2 id="FloatingActionButton"><a href="#FloatingActionButton" class="headerlink" title="FloatingActionButton"></a>FloatingActionButton</h2><p>（1）准备好图（不建议用有底色的，大小不对容易效果很差）<br>（2）添加FloatingActionButton控件（也用了design support库，要添加依赖）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;android.support.design.widget.FloatingActionButton</span><br><span class="line">            android:id=&quot;@+id/fab&quot;</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_gravity=&quot;bottom|end&quot;</span><br><span class="line">            android:layout_margin=&quot;16dp&quot;</span><br><span class="line">            android:src=&quot;@drawable/ic_done&quot;</span><br><span class="line">            app:elevation=&quot;10dp&quot;//调整悬浮高度，高度越高，阴影越少</span><br><span class="line">            app:backgroundTint=&quot;@color/cardview_light_background&quot;/&gt;</span><br></pre></td></tr></table></figure><p><strong>！！！</strong>悬浮按钮默认的底色是红色的，建议使用app:backgroundTint=”@color/cardview_light_background”将底色调成透明色</p><h2 id="Snackbar-和Toast类似"><a href="#Snackbar-和Toast类似" class="headerlink" title="Snackbar(和Toast类似)"></a>Snackbar(和Toast类似)</h2><p>1.调用了make()方法创建一个Snackbar对象<br>第一个参数可以是当前布局的任意一个View都可以，用于寻找最外层的布局<br>第二个参数是Snackbar中显示的内容<br>第三个参数是Snackbar显示的时长<br>2.调用setAction()设置一个动作，这里是弹出一个Toast</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Snackbar.make(view,&quot;Data deleted&quot;,Snackbar.LENGTH_SHORT).setAction(&quot;Undo&quot;, new View.OnClickListener() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onClick(View v) &#123;</span><br><span class="line">        Toast.makeText(MainActivity.this, &quot;Data restored&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>！！！</strong>会出现Snackbar遮挡悬浮按钮的情况，用下面的CoordinatorLayout解决</p><h2 id="CoordinatorLayout"><a href="#CoordinatorLayout" class="headerlink" title="CoordinatorLayout"></a>CoordinatorLayout</h2><p>（1）添加CoordinatorLayout控件（放在DrawerLayout里面，包着Toolbar和FloatingActionButton，就可以解决悬浮按钮被遮挡的问题）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;android.support.design.widget.CoordinatorLayout</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;match_parent&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/android.support.design.widget.CoordinatorLayout&gt;</span><br></pre></td></tr></table></figure><h1 id="卡片式布局"><a href="#卡片式布局" class="headerlink" title="卡片式布局"></a>卡片式布局</h1><h2 id="CardView"><a href="#CardView" class="headerlink" title="CardView"></a>CardView</h2><p>（1）添加依赖<br><code>compile &#39;com.android.support:recyclerview-v7:24.2.1&#39;</code><br><code>compile &#39;com.android.support:cardview-v7:24.2.1&#39;</code><br><code>compile &#39;com.github.bumptech.glide:glide:3.7.0&#39;</code><br>Glide是一个超级强大的图片加载库，一行代码即可实现图片加载功能<br>（2）在CoordinatorLayout中添加一个RecyclerView（类似做瀑布流的过程）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> &lt;android.support.v7.widget.RecyclerView</span><br><span class="line">    android:id=&quot;@+id/recycler_view&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p>（3）定义一个实体类Fruit</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class Fruit &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int imageId;</span><br><span class="line">    public Fruit(String name,int imageId) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this .imageId = imageId;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getName( ) &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getImageId( ) &#123;</span><br><span class="line">        return imageId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（4）在layout目录下新建fruit_item.xml(用来显示水果图片和文字)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;android.support.v7.widget.CardView</span><br><span class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">    android:layout_margin=&quot;5dp&quot;</span><br><span class="line">    app:cardCornerRadius=&quot;15dp&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:orientation=&quot;vertical&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;ImageView</span><br><span class="line">            android:id=&quot;@+id/fruit_image&quot;</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            android:layout_height=&quot;100dp&quot;</span><br><span class="line">            android:scaleType=&quot;centerCrop&quot;/&gt;</span><br><span class="line">            //scaleType用于指定图片的缩放模式，centerCrop表示原比例填充，多余部分裁减掉</span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:id=&quot;@+id/fruit_name&quot;</span><br><span class="line">            android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_gravity=&quot;center_horizontal&quot;</span><br><span class="line">            android:layout_margin=&quot;5dp&quot;</span><br><span class="line">            android:textSize=&quot;16sp&quot;/&gt;</span><br><span class="line">    &lt;/LinearLayout&gt;</span><br><span class="line">&lt;/android.support.v7.widget.CardView&gt;</span><br></pre></td></tr></table></figure><p>（5）准备一个适配器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">public class FruitAdapter extends RecyclerView.Adapter&lt;FruitAdapter.ViewHolder&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private List&lt;Fruit&gt; mFruitList;</span><br><span class="line">    private Context mContext;</span><br><span class="line">    static class ViewHolder extends RecyclerView.ViewHolder &#123;</span><br><span class="line">        CardView cardView;</span><br><span class="line">        ImageView fruitImage;</span><br><span class="line">        TextView fruitName;</span><br><span class="line"></span><br><span class="line">        public ViewHolder(View view) &#123;</span><br><span class="line">            super(view);</span><br><span class="line">            cardView = (CardView) view;</span><br><span class="line">            fruitImage = (ImageView) view.findViewById(R.id.fruit_image);</span><br><span class="line">            fruitName = (TextView) view.findViewById(R.id.fruit_name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public FruitAdapter(List&lt;Fruit&gt;fruitList)&#123;</span><br><span class="line">        mFruitList = fruitList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public ViewHolder onCreateViewHolder(ViewGroup parent,int viewType)&#123;</span><br><span class="line">        if (mContext == null)&#123;</span><br><span class="line">            mContext = parent.getContext();</span><br><span class="line">        &#125;</span><br><span class="line">        View view = LayoutInflater.from(mContext).inflate(R.layout.fruit_item,parent,false);</span><br><span class="line">        final ViewHolder holder = new ViewHolder(view) ;</span><br><span class="line">        holder.cardView.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick (View v) &#123;</span><br><span class="line">                int position = holder.getAdapterPosition();</span><br><span class="line">                Fruit fruit = mFruitList.get(position);</span><br><span class="line">                Intent intent = new Intent(mContext, FruitActivity.class);</span><br><span class="line">                intent.putExtra(FruitActivity.FRUIT_NAME,fruit.getName());</span><br><span class="line">                intent.putExtra(FruitActivity.FRUIT_IMAGE_ID,fruit.getImageId());</span><br><span class="line">                mContext.startActivity(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        return holder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onBindViewHolder(ViewHolder holder,int position)&#123;</span><br><span class="line">        Fruit fruit = mFruitList.get(position);</span><br><span class="line">        holder.fruitName.setText(fruit.getName());</span><br><span class="line">        Glide.with(mContext).load(fruit.getImageId()).into(holder.fruitImage);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public int getItemCount()&#123;</span><br><span class="line">        return mFruitList.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>在onBindViewHolder()方法中用了Glide加载水果图片<br><code>Glide.with(mContext).load(fruit.getImageId()).into(holder.fruitImage);</code><br><strong>Glide用法：</strong><br>首先传入一个Context、Activity或Fragment参数<br>然后调用load()方法加载图片，可以是URL地址，也可以是本地路径，或者是一个资源id<br>最后调用into()方法将图片设置到具体某一个ImageView中即可<br>（6）修改MainActivity中的代码<br>1.定义一个数组，放很多个Fruit的实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">private Fruit[]fruits = &#123;</span><br><span class="line">    new Fruit( &quot;Apple&quot;,R.drawable.apple), new Fruit( &quot;Banana&quot;, R.drawable.banana) ,</span><br><span class="line">    new Fruit (&quot;Orange&quot;,R.drawable.orange),new Fruit(&quot;watermelon&quot;,R.drawable.watermelon) ,</span><br><span class="line">    new Fruit(&quot;Pear&quot;,R.drawable.pear),new Fruit(&quot;Grape&quot;,R.drawable.grape) ,</span><br><span class="line">    new Fruit(&quot;Pineapple&quot;,R.drawable.pineapple),new Fruit( &quot;Strawberry&quot;,R.drawable.strawberry) ,</span><br><span class="line">    new Fruit(&quot;cherry&quot;,R.drawable.cherry),new Fruit( &quot;Mango&quot;,R.drawable.mango)&#125;;</span><br><span class="line">    private List&lt;Fruit&gt; fruitList = new ArrayList&lt;&gt;( ) ;</span><br><span class="line">    private FruitAdapter adapter;</span><br></pre></td></tr></table></figure><p>2.初始化水果数据，实现两列竖向瀑布流</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">initFruits();</span><br><span class="line">RecyclerView recyclerView = (RecyclerView)findViewById(R.id.recycler_view);</span><br><span class="line">GridLayoutManager layoutManager = new GridLayoutManager(this,2);</span><br><span class="line">recyclerView.setLayoutManager(layoutManager);</span><br><span class="line">adapter = new FruitAdapter(fruitList);</span><br><span class="line">recyclerView.setAdapter(adapter);</span><br></pre></td></tr></table></figure><p>3.清空fruitList中的数据，再使用一个随机函数在Fruit数组中挑一个水果放在fruitList中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">private void initFruits()&#123;</span><br><span class="line">    fruitList.clear();</span><br><span class="line">    for (int i=0;i&lt;50;i++)&#123;</span><br><span class="line">        Random random = new Random();</span><br><span class="line">        int index = random.nextInt(fruits.length);</span><br><span class="line">        fruitList.add(fruits[index]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>问题：</strong>Toolbar被RecyclerView挡住了，用下面的APPBarLayout解决</p><h2 id="APPBarLayout"><a href="#APPBarLayout" class="headerlink" title="APPBarLayout"></a>APPBarLayout</h2><p>（1）在Toolbar外加上APPBarLayout控件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;android.support.design.widget.AppBarLayout</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;wrap_content&quot;&gt;</span><br><span class="line">    &lt;android.support.v7.widget.Toolbar</span><br><span class="line">        android:id=&quot;@+id/toolbar&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;?attr/actionBarSize&quot;</span><br><span class="line">        android:background=&quot;?attr/colorPrimary&quot;</span><br><span class="line">        android:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span><br><span class="line">        app:popupTheme=&quot;@style/ThemeOverlay.AppCompat.Light&quot;</span><br><span class="line">        app:layout_scrollFlags=&quot;scroll|enterAlways|snap&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">&lt;/android.support.design.widget.AppBarLayout&gt;</span><br></pre></td></tr></table></figure><p>（2）在RecyclerView中使用app:layout_behavior=”@string/appbar_scrolling_view_behavior”</p><p>（3）这里在Toolbar中添加了一个app:layout_scrollFlags属性,并将这个属性的值指定成了scroll|enterAlways|snap。<br>scroll表示当RecyclerView向上滚动的时候，Toolbar会跟着一起向上滚动并实现隐藏<br>enterAlways表示当RecyclerView向下滚动的时候，Toolbar会跟着一起向下滚动并重新显示<br>snap表示当Toolbar还没有完全隐藏或显示的时候，会根据当前滚动的距离，自动选择是隐藏还是显示</p><h1 id="下拉刷新"><a href="#下拉刷新" class="headerlink" title="下拉刷新"></a>下拉刷新</h1><p>（1）在RecyclerView外嵌套一层SwipeRefreshLayout</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;android.support.v4.widget.SwipeRefreshLayout</span><br><span class="line">    android:id=&quot;@+id/swipe_refresh&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;</span><br><span class="line">    app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;&gt;</span><br><span class="line">    &lt;android.support.v7.widget.RecyclerView</span><br><span class="line">        android:id=&quot;@+id/recycler_view&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;match_parent&quot;/&gt;</span><br><span class="line">&lt;/android.support.v4.widget.SwipeRefreshLayout&gt;</span><br></pre></td></tr></table></figure><p>（2）处理刷新逻辑<br>1.写在onCreate中的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">private SwipeRefreshLayout swipeRefresh;</span><br><span class="line">···</span><br><span class="line">swipeRefresh = (SwipeRefreshLayout) findViewById(R.id.swipe_refresh);//拿到实例</span><br><span class="line">swipeRefresh.setColorSchemeResources(R.color.colorPrimary);//设置下拉刷新进度条的颜色</span><br><span class="line">//设置监听器，触发刷新操作的时候就会回调这个监听器的onRefresh()方法</span><br><span class="line">swipeRefresh.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onRefresh() &#123;</span><br><span class="line">        refreshFruits() ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>2.实现refreshFruits</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">private void refreshFruits()&#123;</span><br><span class="line">    //开启一个线程</span><br><span class="line">    new Thread (new Runnable( ) &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run()&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                //将线程沉睡两秒</span><br><span class="line">                Thread.sleep(2000);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            //将线程切回主线程</span><br><span class="line">            runOnUiThread(new Runnable() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void run() &#123;</span><br><span class="line">                    //调用initFruits重新生成数据</span><br><span class="line">                    initFruits();</span><br><span class="line">                    //调用notifyDataSetChanged通知数据发生了变化</span><br><span class="line">                    adapter.notifyDataSetChanged();</span><br><span class="line">                    //最后调用setRefreshing方法并传入false用于表示刷新事件结束，并隐藏刷新条</span><br><span class="line">                    swipeRefresh.setRefreshing(false);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="可折叠式标题栏"><a href="#可折叠式标题栏" class="headerlink" title="可折叠式标题栏"></a>可折叠式标题栏</h1><h2 id="CollapsingToolbarLayout（只能作为APPBarLayout的直接子布局，APPBarLayout又是CoordinatorLayout的子布局）"><a href="#CollapsingToolbarLayout（只能作为APPBarLayout的直接子布局，APPBarLayout又是CoordinatorLayout的子布局）" class="headerlink" title="CollapsingToolbarLayout（只能作为APPBarLayout的直接子布局，APPBarLayout又是CoordinatorLayout的子布局）"></a>CollapsingToolbarLayout（只能作为APPBarLayout的直接子布局，APPBarLayout又是CoordinatorLayout的子布局）</h2><p>创建一个额外活动作为水果的详情展示界面，创建一个FruitActivity<br>（1）在layout中建一个activity_fruit.xml的布局</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&lt;android.support.design.widget.CoordinatorLayout</span><br><span class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;</span><br><span class="line">    android:fitsSystemWindows=&quot;true&quot;&gt;</span><br><span class="line">    &lt;android.support.design.widget.AppBarLayout</span><br><span class="line">    android:id=&quot;@+id/appBar&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;250dp&quot;</span><br><span class="line">    android:fitsSystemWindows=&quot;true&quot;</span><br><span class="line">    &gt;</span><br><span class="line">        &lt;android.support.design.widget.CollapsingToolbarLayout</span><br><span class="line">            android:id=&quot;@+id/collapsing_toolbar&quot;</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            android:layout_height=&quot;match_parent&quot;</span><br><span class="line">            android:theme=&quot;@style/ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span><br><span class="line">            android:fitsSystemWindows=&quot;true&quot;</span><br><span class="line">            app:contentScrim=&quot;?attr/colorPrimary&quot;</span><br><span class="line">            app:layout_scrollFlags=&quot;scroll|exitUntilCollapsed&quot;&gt;</span><br><span class="line">            &lt;ImageView</span><br><span class="line">                android:id=&quot;@+id/fruit_image_view&quot;</span><br><span class="line">                android:layout_width=&quot;match_parent&quot;</span><br><span class="line">                android:layout_height=&quot;match_parent&quot;</span><br><span class="line">                android:scaleType=&quot;centerCrop&quot;</span><br><span class="line">                android:fitsSystemWindows=&quot;true&quot;</span><br><span class="line">                app:layout_collapseMode=&quot;parallax&quot;/&gt;</span><br><span class="line">            &lt;android.support.v7.widget.Toolbar</span><br><span class="line">                android:id=&quot;@+id/toolbar&quot;</span><br><span class="line">                android:layout_width=&quot;match_parent&quot;</span><br><span class="line">                android:layout_height=&quot;?attr/actionBarSize&quot;</span><br><span class="line">                app:layout_collapseMode=&quot;pin&quot;/&gt;</span><br><span class="line">        &lt;/android.support.design.widget.CollapsingToolbarLayout&gt;</span><br><span class="line">    &lt;/android.support.design.widget.AppBarLayout&gt;</span><br><span class="line">    &lt;android.support.v4.widget.NestedScrollView</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;match_parent&quot;</span><br><span class="line">        app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;&gt;</span><br><span class="line">        &lt;LinearLayout</span><br><span class="line">            android:orientation=&quot;vertical&quot;</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;&gt;</span><br><span class="line">            &lt;android.support.v7.widget.CardView</span><br><span class="line">                android:layout_width=&quot;match_parent&quot;</span><br><span class="line">                android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">                android:layout_marginBottom=&quot;15dp&quot;</span><br><span class="line">                android:layout_marginLeft=&quot;15dp&quot;</span><br><span class="line">                android:layout_marginRight=&quot;15dp&quot;</span><br><span class="line">                android:layout_marginTop=&quot;35dp&quot;</span><br><span class="line">                app:cardCornerRadius=&quot;4dp&quot;&gt;</span><br><span class="line">                &lt;TextView</span><br><span class="line">                    android:id=&quot;@+id/fruit_content_text&quot;</span><br><span class="line">                    android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">                    android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">                    android:layout_margin=&quot;10dp&quot;/&gt;</span><br><span class="line">            &lt;/android.support.v7.widget.CardView&gt;</span><br><span class="line">        &lt;/LinearLayout&gt;</span><br><span class="line">    &lt;/android.support.v4.widget.NestedScrollView&gt;</span><br><span class="line"></span><br><span class="line">    &lt;android.support.design.widget.FloatingActionButton</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_margin=&quot;16dp&quot;</span><br><span class="line">        android:src=&quot;@drawable/ic_comment&quot;</span><br><span class="line">        app:layout_anchor=&quot;@+id/appBar&quot;</span><br><span class="line">        app:layout_anchorGravity=&quot;bottom|right&quot;</span><br><span class="line">        app:backgroundTint=&quot;@color/cardview_light_background&quot;</span><br><span class="line">        android:layout_gravity=&quot;center_vertical|left&quot;</span><br><span class="line">        android:id=&quot;@+id/floatingActionButton&quot; /&gt;</span><br><span class="line">&lt;/android.support.design.widget.CoordinatorLayout&gt;</span><br></pre></td></tr></table></figure><p>简化版：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;CoordinatorLayout&gt;//响应滚动事件</span><br><span class="line">    &lt;AppBarLayout&gt;//用于解决Toolbar被挡住的问题</span><br><span class="line">        &lt;CollapsingToolbarLayout&gt;//可折叠式标题栏</span><br><span class="line">            &lt;ImageView/&gt;</span><br><span class="line">            &lt;Toolbar/&gt;//顶部标题栏</span><br><span class="line">        &lt;/CollapsingToolbarLayout&gt;</span><br><span class="line">    &lt;/AppBarLayout&gt;</span><br><span class="line">    &lt;NestedScrollView&gt;//响应滚动事件，只能有一个直接子布局</span><br><span class="line">        &lt;LinearLayout&gt;//用于嵌套</span><br><span class="line">            &lt;CardView&gt;//卡片</span><br><span class="line">                &lt;TextView/&gt;//卡片配的文字</span><br><span class="line">            &lt;/CardView&gt;</span><br><span class="line">        &lt;/LinearLayout&gt;</span><br><span class="line">    &lt;/NestedScrollView&gt;</span><br><span class="line">    &lt;FloatingActionButton/&gt;//悬浮按钮</span><br><span class="line">&lt;/CoordinatorLayout&gt;</span><br></pre></td></tr></table></figure><p>（2）修改FruitActivity中的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">public class FruitActivity extends AppCompatActivity &#123;</span><br><span class="line">    public static final String FRUIT_NAME = &quot;fruit_name&quot; ;</span><br><span class="line">    public static final String FRUIT_IMAGE_ID = &quot;fruit_image_id&quot; ;</span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate( Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate( savedInstanceState) ;</span><br><span class="line">        setContentView(R.layout.activity_fruit) ;</span><br><span class="line">        //通过Intent获取水果名和图片的id</span><br><span class="line">        Intent intent = getIntent();</span><br><span class="line">        String fruitName = intent.getStringExtra(FRUIT_NAME);</span><br><span class="line">        int fruitImageId = intent.getIntExtra(FRUIT_IMAGE_ID,0);</span><br><span class="line">        //通过findViewById获取各个控件的实例</span><br><span class="line">        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar) ;</span><br><span class="line">        CollapsingToolbarLayout collapsingToolbar = (CollapsingToolbarLayout)findViewById(R.id.collapsing_toolbar) ;</span><br><span class="line">        ImageView fruitImageView = (ImageView) findViewById(R.id.fruit_image_view);</span><br><span class="line">        TextView fruitContentText = (TextView) findViewById(R.id.fruit_content_text);</span><br><span class="line">        //显示Toolbar按钮</span><br><span class="line">        setSupportActionBar(toolbar) ;</span><br><span class="line">        ActionBar actionBar = getSupportActionBar( );</span><br><span class="line">        if ( actionBar !=null) &#123;</span><br><span class="line">            actionBar.setDisplayHomeAsUpEnabled(true);</span><br><span class="line">        &#125;</span><br><span class="line">        //加载图片</span><br><span class="line">        collapsingToolbar.setTitle(fruitName);</span><br><span class="line">        Glide.with(this).load(fruitImageId).into(fruitImageView) ;</span><br><span class="line">        String fruitContent = generateFruitContent(fruitName) ;</span><br><span class="line">        fruitContentText.setText(fruitContent) ;</span><br><span class="line">    &#125;</span><br><span class="line">    //初始化水果数据</span><br><span class="line">    private String generateFruitContent(String fruitName) &#123;</span><br><span class="line">        StringBuilder fruitContent = new StringBuilder( ) ;</span><br><span class="line">        for (int i = 0; i &lt; 500; i++)&#123;</span><br><span class="line">            fruitContent.append(fruitName ) ;</span><br><span class="line">        &#125;</span><br><span class="line">        return fruitContent.toString ( );</span><br><span class="line">    &#125;</span><br><span class="line">    //处理Toolbar的点击事件</span><br><span class="line">    @Override</span><br><span class="line">    public boolean onOptionsItemSelected(MenuItem item) &#123;</span><br><span class="line">        switch (item.getItemId()) &#123;</span><br><span class="line">            case android.R.id.home:</span><br><span class="line">                finish();</span><br><span class="line">                return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return super.onOptionsItemSelected(item) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）处理RecyclerView的点击事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public ViewHolder onCreateViewHolder(ViewGroup parent,int viewType)&#123;</span><br><span class="line">    if (mContext == null)&#123;</span><br><span class="line">        mContext = parent.getContext();</span><br><span class="line">    &#125;</span><br><span class="line">    View view = LayoutInflater.from(mContext).inflate(R.layout.fruit_item,parent,false);</span><br><span class="line">    //给CardView注册一个点击事件监听器</span><br><span class="line">    //在点击时获取水果名和图片id，传入Intent中，最后调用startActivity启动FruitActivity</span><br><span class="line">    final ViewHolder holder = new ViewHolder(view) ;</span><br><span class="line">    holder.cardView.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onClick (View v) &#123;</span><br><span class="line">            int position = holder.getAdapterPosition();</span><br><span class="line">            Fruit fruit = mFruitList.get(position);</span><br><span class="line">            Intent intent = new Intent(mContext, FruitActivity.class);</span><br><span class="line">            intent.putExtra(FruitActivity.FRUIT_NAME,fruit.getName());</span><br><span class="line">            intent.putExtra(FruitActivity.FRUIT_IMAGE_ID,fruit.getImageId());</span><br><span class="line">            mContext.startActivity(intent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    return holder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="充分利用系统状态栏空间"><a href="#充分利用系统状态栏空间" class="headerlink" title="充分利用系统状态栏空间"></a>充分利用系统状态栏空间</h2><p>为了让背景图能够与状态栏融合<br>（1）在CoordinatorLayout、AppBarLayout、CollapsingToolbarLayout、ImageView中都设置上android:fitsSystemWindows=”true”属性<br>（2）将状态栏颜色指定成透明色，在res目录建一个values-v21目录，再在里面创建一个styles.xml文件，代码编写如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;resources&gt;</span><br><span class="line">    &lt;style name=&quot;FruitActivityTheme&quot; parent=&quot;AppTheme&quot;&gt;</span><br><span class="line">        &lt;item name=&quot;android:statusBarColor&quot;&gt;@android:color/transparent&lt;/item&gt;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/resources&gt;</span><br></pre></td></tr></table></figure><p>（3）对values/styles.xml文件进行修改<br>添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;style name=&quot;FruitActivityTheme&quot; parent=&quot;AppTheme&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>（4）修改在AndroidManifest.xml中的代码<br>在activity中添加android:theme=”@style/FruitActivityTheme”：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity </span><br><span class="line">    android:name=&quot;.FruitActivity&quot;</span><br><span class="line">    android:theme=&quot;@style/FruitActivityTheme&quot;&gt;</span><br><span class="line">&lt;/activity&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Material-Design&quot;&gt;&lt;a href=&quot;#Material-Design&quot; class=&quot;headerlink&quot; title=&quot;Material Design&quot;&gt;&lt;/a&gt;Material Design&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Material D</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Android多线程编程</title>
    <link href="https://anbyss.github.io/2021/09/27/Android%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/"/>
    <id>https://anbyss.github.io/2021/09/27/Android%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/</id>
    <published>2021-09-27T08:33:45.000Z</published>
    <updated>2021-09-27T08:33:44.518Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线程的基本用法"><a href="#线程的基本用法" class="headerlink" title="线程的基本用法"></a>线程的基本用法</h1><h2 id="定义启动一个线程"><a href="#定义启动一个线程" class="headerlink" title="定义启动一个线程"></a>定义启动一个线程</h2><p>第一种方式：（耦合性高不推荐使用）<br>（1）新建一个类继承自Thread<br>（2）重写父类的run()方法<br>（3）在run()中编写耗时逻辑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class MyThread extends Thread&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run()&#123;</span><br><span class="line">        //处理具体的逻辑</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（4）new出MyTread的实例，然后调用start()方法(启动线程)<br><code>new MyThread().start();</code></p><p>第二种方式：<br>（1）实现Runnable接口定义一个线程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class MyThread implements Runnable&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run()&#123;</span><br><span class="line">        //处理具体的逻辑</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）Thread的构造函数接受一个Runnable参数<br><code>MyThread myThread = new MyThread();</code><br>（3）new出的MyThread是一个实现了Runnable接口的对象，直接传入Thread的构造函数里，再调用Thread的start()方法<br><code>new Thread(myThread).start();</code></p><p>第三种方式：（常用）<br>（1）匿名类的方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">new Thread(new Runnable()&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run()&#123;</span><br><span class="line">        //处理具体的逻辑</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure><h1 id="在子线程中更新UI"><a href="#在子线程中更新UI" class="headerlink" title="在子线程中更新UI"></a>在子线程中更新UI</h1><p>（1）定义了一个整型常量UPDATE_TEXT，用于表示更新TextView这个动作<br><code>public static final int UPDATE_TEXT = 1;</code><br>（2）然后新增一个Handler对象，并重写父类的handleMessage()方法，在这里对具体的Message进行处理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private Handler handler = new Handler()&#123;</span><br><span class="line">        public void handleMessage(Message msg)&#123;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>（3）如果发现Message的what字段的值等于UPDATE_TEXT，就将TextView显示的内容改成Nice to meet you</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">case UPDATE_TEXT:</span><br><span class="line">    text.setText(&quot;Nice to meet you&quot;);</span><br><span class="line">    break;</span><br></pre></td></tr></table></figure><p>（4）Change Text按钮的点击事件中的代码<br>a.创建一个Message(android.os.Message)对象,并将它的what字段的值指定为UPDATE_TEXT</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Message message = new Message();</span><br><span class="line">message.what = UPDATE_TEXT;</span><br></pre></td></tr></table></figure><p>b.然后调用Handler的sendMessage()方法将这条Message发送出去<br><code>handler.sendMessage(message);//将Message对象发送出去</code><br>c.接下来对Message携带的what字段的值进行判断，如果等于UPDATE_TEXT，就将TextView显示的内容改成Nice to meet you</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">case UPDATE_TEXT:</span><br><span class="line">    text.setText(&quot;Nice to meet you&quot;);</span><br><span class="line">    break;</span><br></pre></td></tr></table></figure><p>完整代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity implements View.OnClickListener &#123;</span><br><span class="line">    public static final int UPDATE_TEXT = 1;</span><br><span class="line">    private TextView text;</span><br><span class="line">    private Handler handler = new Handler()&#123;</span><br><span class="line">        public void handleMessage(Message msg)&#123;</span><br><span class="line">            switch (msg.what)&#123;</span><br><span class="line">                case UPDATE_TEXT:</span><br><span class="line">                    //可以在这里进行UI操作</span><br><span class="line">                    text.setText(&quot;Nice to meet you&quot;);</span><br><span class="line">                    break;</span><br><span class="line">                default:</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main) ;</span><br><span class="line">        text = (TextView) findViewById(R.id .text) ;</span><br><span class="line">        Button changeText = (Button) findViewById(R.id.change_text) ;</span><br><span class="line">        changeText.setOnClickListener(this) ;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void onClick (View v) &#123;</span><br><span class="line">        switch (v.getId()) &#123;</span><br><span class="line">            case R.id.change_text :</span><br><span class="line">                new Thread (new Runnable()&#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void run() &#123;</span><br><span class="line">                        Message message = new Message();</span><br><span class="line">                        message.what = UPDATE_TEXT;</span><br><span class="line">                        handler.sendMessage(message);//将Message对象发送出去</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).start();</span><br><span class="line">            break;</span><br><span class="line">        default :</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解析异步消息处理机制"><a href="#解析异步消息处理机制" class="headerlink" title="解析异步消息处理机制"></a>解析异步消息处理机制</h1><p><strong>1.Message</strong><br>Message是在线程之间传递的消息，它可以在内部携带少量的信息，用于在不同线程之间交换数据。上一小节中我们使用到了Message的what字段，除此之外还可以使用arg1和arg2字段来携带一些整型数据，使用obj字段携带一个Object对象。<br><strong>2.Handler</strong><br>Handler顾名思义也就是处理者的意思，它主要是用于发送和处理消息的。发送消息一般是使用Handler的sendMessage()方法，而发出的消息经过一系列地辗转处理后，最终会传递到Handler的handleMessage()方法中。<br><strong>3.MessageQueue</strong><br>MessageQueue是消息队列的意思，它主要用于存放所有通过Handler发送的消息,这部分消息会一直存在于消息队列中，等待被处理,每个线程中只会有一个MessageQueue对象。<br><strong>4.Looper</strong><br>Looper是每个线程中的MessageQueue的管家，调用Looper的loop()方法后，就会进人到一个无限循环当中，然后每当发现 MessageQueue中存在一条消息，就会将它取出，并传递到Handler的handleMessage()方法中,每个线程中也只会有一个Looper对象。</p><p>异步消息处理的流程：<br>（1）首先需要在主线程当中创建一个Handler对象，并重写handleMessage()方法<br>（2）然后当子线程中需要进行UI操作时，就创建一个Message对象，并通过Handler将这条消息发送出去<br>（3）之后这条消息会被添加到MessageQueue的队列中等待被处理，而Looper则会一直尝试从MessageQueue中取出待处理消息，最后分发回Handler的handleMessage()方法中。<br>（4）由于Handler是在主线程中创建的，所以此时handleMessage()方法中的代码也会在主线程中运行，于是我们在这里就可以安心地进行UI操作了</p><h1 id="使用AsyncTask（抽象类）"><a href="#使用AsyncTask（抽象类）" class="headerlink" title="使用AsyncTask（抽象类）"></a>使用AsyncTask（抽象类）</h1><p>由于AsyncTask是一个抽象类，所以如果我们想使用它，就必须要创建一个子类去继承它。在继承时我们可以为AsyncTask类指定3个泛型参数，这3个参数的用途如下。<br><strong>Params</strong>：在执行AsyncTask 时需要传入的参数，可用于在后台任务中使用。<br><strong>Progress</strong>：后台任务执行时，如果需要在界面上显示当前的进度，则使用这里指定的泛<br>型作为进度单位。<br><strong>Result</strong>：当任务执行完毕后，如果需要对结果进行返回，则使用这里指定的泛型作为返<br>回值类型。</p><h2 id="一个最简单的自定义AsyncTask如下"><a href="#一个最简单的自定义AsyncTask如下" class="headerlink" title="一个最简单的自定义AsyncTask如下:"></a>一个最简单的自定义AsyncTask如下:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class DownloadTask extends AsyncTask&lt;Void，Integer，Boolean&gt; &#123;</span><br><span class="line">    ···</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个泛型参数指定为Void，表示在执行AsyncTask的时候不需要传入参数给后台任务。<br>第二个泛型参数指定为Integer，表示使用整型数据来作为进度显示单位。<br>第三个泛型参数指定为Boolean，则表示使用布尔型数据来反馈执行结果。</p><h2 id="重写方法"><a href="#重写方法" class="headerlink" title="重写方法"></a>重写方法</h2><p>1.onPreExecute()<br>这个方法会在后台任务开始执行之前调用，用于进行一些界面上的初始化操作，比如显示一个进度条对话框等。<br>2.doInBackground(Params…)<br>这个方法中的所有代码都会在子线程中运行，我们应该在这里去处理所有的耗时任务。任务一旦完成就可以通过return语句来将任务的执行结果返回，如果AsyncTask的第三个泛型参数指定的是Void，就可以不返回任务执行结果。注意，在这个方法中是不可以进行UI操作的，如果需要更新UI元素，比如说<strong>反馈当前任务的执行进度</strong>，可以调用publishProgress(Progress…)方法来完成。<br>3.onProgressUpdate(Progress…)<br>当在后台任务中调用了publishProgress(Progress…)方法后，onProgressUpdate(Progress…)方法就很快会被调用，该方法中携带的参数就是在后台任务中传递过来的。在这个方法中可以对UI进行操作，利用参数中的数值就可以对界面元素进行相应的更新。<br>4.onPostExecute(Result)<br>当后台任务执行完毕并通过return语句进行返回时，这个方法就很快会被调用。返回的数据会作为参数传递到此方法中，可以利用返回的数据来进行一些UI操作，比如说提醒任务执行的结果，以及关闭掉进度条对话框等。</p><h2 id="一个完整的自定义AsyncTask"><a href="#一个完整的自定义AsyncTask" class="headerlink" title="一个完整的自定义AsyncTask"></a>一个完整的自定义AsyncTask</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">class DownloadTask extends AsyncTask&lt;Void,Integer,Boolean&gt; &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onPreExecute()&#123;</span><br><span class="line">        progressDialog.show(); //显示进度对话框</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected Boolean doInBackground (Void...params) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            while(true) &#123;</span><br><span class="line">                int downloadPercent = doDownload(); // 这是一个虚构的方法</span><br><span class="line">                publishProgress (downloadPercent) ;</span><br><span class="line">                if (downloadPercent &gt;= 100) &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    protected void onProgressUpdate(Integer...values) &#123;</span><br><span class="line">        //在这里更新下载进度</span><br><span class="line">        progressDialog.setMessage (&quot;Downloaded &quot; + values[0] +&quot;%&quot; ) ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    protected void onPostExecute(Boolean result) &#123;</span><br><span class="line">        progressDialog.dismiss(); //关闭进度对话框</span><br><span class="line">        //在这里提示下载结果</span><br><span class="line">        if (result) &#123;</span><br><span class="line">            Toast.makeText(context,&quot;Download succeeded&quot;,Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            Toast.makeText(context,&quot; Download failed&quot;,Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用AsyncTask的诀窍就是:</strong><br>在doInBackground()方法中执行具体的耗时任务<br>在onProgressUpdate()方法中进行UI操作<br>在onPostExecute()方法中执行一些任务的收尾工作<br><strong>如果想要启动这个任务，只需编写以下代码即可:</strong><br><code>new DownloadTask().execute();</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;线程的基本用法&quot;&gt;&lt;a href=&quot;#线程的基本用法&quot; class=&quot;headerlink&quot; title=&quot;线程的基本用法&quot;&gt;&lt;/a&gt;线程的基本用法&lt;/h1&gt;&lt;h2 id=&quot;定义启动一个线程&quot;&gt;&lt;a href=&quot;#定义启动一个线程&quot; class=&quot;headerli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>运用手机多媒体</title>
    <link href="https://anbyss.github.io/2021/09/18/%E8%BF%90%E7%94%A8%E6%89%8B%E6%9C%BA%E5%A4%9A%E5%AA%92%E4%BD%93/"/>
    <id>https://anbyss.github.io/2021/09/18/%E8%BF%90%E7%94%A8%E6%89%8B%E6%9C%BA%E5%A4%9A%E5%AA%92%E4%BD%93/</id>
    <published>2021-09-18T11:22:01.000Z</published>
    <updated>2021-09-20T15:06:36.530Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用通知"><a href="#使用通知" class="headerlink" title="使用通知"></a>使用通知</h1><h2 id="通知的基本用法"><a href="#通知的基本用法" class="headerlink" title="通知的基本用法"></a>通知的基本用法</h2><h3 id="创建通知的基本步骤"><a href="#创建通知的基本步骤" class="headerlink" title="创建通知的基本步骤"></a>创建通知的基本步骤</h3><p>（1）建一个NotificationManager,调用getSystemService()方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NotificationManger manger = (NotificationManger)getSystemService(Context.NOTIFICATION_SERVICE);</span><br></pre></td></tr></table></figure><p>（2）使用一个Builder构造器，创建Notification对象<br>API容易不稳定，解决方法：用NotificationCompat类创建Notification对象<br><code>Notification notification = new NotificationCompat.Builder(context).build();</code><br>（3）在build()方法前连缀设置方法（任意多）<br>setContentTitle()   标题内容<br>setContentText()    通知正文<br>setWhen()           通知创建的时间<br>setSmallIcon()      通知小图标<br>setLargeIcon()      通知大图标</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Notification notification = new NotificationCompat.Builder(context)</span><br><span class="line">        .setContentTitle( &quot;This is content title&quot;)</span><br><span class="line">        .setContentText( &quot;This is content text&quot; )</span><br><span class="line">        .setWhen( System.currentTimeMillis())</span><br><span class="line">        .setSmallIcon(R.drawable.small_icon)</span><br><span class="line">        .setLargeIcon(BitmapFactory.decodeResource(getResources(),R.drawable.large_icon))</span><br><span class="line">        .build( );</span><br></pre></td></tr></table></figure><p>（4）调用NotificationManger的notify(id,Notification对象)方法显示通知<br><code>manager.notify(1,notification);</code></p><h3 id="点击效果（PendingIntent）"><a href="#点击效果（PendingIntent）" class="headerlink" title="点击效果（PendingIntent）"></a>点击效果（PendingIntent）</h3><p>（1）getActivity(),getBroadcast(),getService()（都是四个参数）<br>第一个参数：Context<br>第二个参数：0<br>第三个参数：Intent对象<br>第四个参数：FLAG_ONE_SHOT、FLAG_NO_CREATE、FLAG_CANCEL_CURRENT、FLAG_UPDATE_CURRENT（通常传入0）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = new Intent(this,NotificationActivity.class);</span><br><span class="line">PendingIntent pi = PendingIntent.getActivity(this,0,intent,0);</span><br></pre></td></tr></table></figure><p>（2）在构造器后连缀一个setContentIntent(PendingIntent对象)方法<br><code>.setContentIntent(pi)</code></p><h3 id="取消通知"><a href="#取消通知" class="headerlink" title="取消通知"></a>取消通知</h3><p>（1）连缀一个setAutoCancel()方法<br><code>.setAutoCancel(true)</code><br>（2）显式调用NotificationManger的cancel(id)方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NotificationManager manager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</span><br><span class="line">manager.cancel(1);</span><br></pre></td></tr></table></figure><h2 id="通知的进阶技巧"><a href="#通知的进阶技巧" class="headerlink" title="通知的进阶技巧"></a>通知的进阶技巧</h2><h3 id="通知发出时播放音频"><a href="#通知发出时播放音频" class="headerlink" title="通知发出时播放音频"></a>通知发出时播放音频</h3><p>用setSound()方法<br><code>setSound(Uri.fromFile(new File(&quot;/system/media/audio/ringtones/Luna.ogg&quot;)))</code></p><h3 id="通知发出时进行振动"><a href="#通知发出时进行振动" class="headerlink" title="通知发出时进行振动"></a>通知发出时进行振动</h3><p>（1）用vibrate()方法<br>它是一个长整型的数组，用于设置手机静止和振动的时长，以<strong>毫秒</strong>为单位。<br>下标为0的值表示手机静止的时长，下标为1的值表示手机振动的时长，下标为2的值又表示手机静止的时长，以此类推。所以，如果想要让手机在通知到来的时候立刻振动1秒，然后静止1秒，再振动1秒，代码就可以写成:<br><code>.setVibrate(new long[]&#123;0,1000,1000,1000&#125;)</code><br>（2）声明权限（在AndroidManifest.xml中）<br><code>&lt;uses-permission android:name=&quot;android.permission.VIBRATE”/&gt;</code></p><h3 id="通知发出时控制手机LED灯的显示"><a href="#通知发出时控制手机LED灯的显示" class="headerlink" title="通知发出时控制手机LED灯的显示"></a>通知发出时控制手机LED灯的显示</h3><p>用setLights()方法<br>第一个参数：指定LED灯的颜色<br>第二个参数：指定LED灯亮起的时长（单位：毫秒）<br>第三个参数：指定LED灯暗去的时长（单位：毫秒）<br><code>.setLights(Color.GREEN,1000,1000)</code><br><strong>通知的默认效果</strong><br><code>setDefaults(NotificationCompat.DEFAULT_ALL)</code></p><h2 id="通知的高级功能"><a href="#通知的高级功能" class="headerlink" title="通知的高级功能"></a>通知的高级功能</h2><h3 id="通知显示一段长文字"><a href="#通知显示一段长文字" class="headerlink" title="通知显示一段长文字"></a>通知显示一段长文字</h3><p>用setStyle()方法,创建一个NotificationCompat.BigTextStyle()对象，用于封装长文字信息<br><code>setStyle(new NotificationCompat.BigTextStyle().bigText(&quot;Learn how to build notifications,send and sync data,and use voice actions.Get the official Android IDE and developer tools to build apps for Android.&quot;))</code></p><h3 id="通知显示一张大图片"><a href="#通知显示一张大图片" class="headerlink" title="通知显示一张大图片"></a>通知显示一张大图片</h3><p>用setStyle()方法,创建了一个NotificationCompat.BigPictureStyle对象,然后调用bigPicture()方法将图片传入，通过BitmapFactory的decodeResource()方法将图片解析成Bitmap对象，再传入到bigPicture()方法中即可。<br><code>.setStyle(new NotificationCompat.BigPictureStyle().bigPicture(BitmapFactory.decodeResource(getResources()，R.drawable.big_image)))</code></p><h3 id="通知显示的重要程度"><a href="#通知显示的重要程度" class="headerlink" title="通知显示的重要程度"></a>通知显示的重要程度</h3><p>用setPriority()方法<br>一共有5个常量值可选:<br>PRIORITY_DEFAULT表示默认的重要程度，和不设置效果是一样的;<br>PRIORITY_MIN表示最低的重要程度，系统可能只会在特定的场景才显示这条通知，比如用户下拉状态栏的时候;<br>PRIORITY_LOW表示较低的重要程度，系统可能会将这类通知缩小，或改变其显示的顺序，将其排在更重要的通知之后;<br>PRIORITY_HIGH表示较高的重要程度，系统可能会将这类通知放大，或改变其显示的顺序，将其排在比较靠前的位置;<br>PRIORITY_MAX表示最高的重要程度，这类通知消息必须要让用户立刻看到，甚至需要用户做出响应操作。<br><code>Notification notification = new NotificationCompat.Builder(this).setPriority (NotificationCompat.PRIORITY_MAX)</code></p><h2 id="调用摄像头和相册"><a href="#调用摄像头和相册" class="headerlink" title="调用摄像头和相册"></a>调用摄像头和相册</h2><h3 id="调用摄像头拍照"><a href="#调用摄像头拍照" class="headerlink" title="调用摄像头拍照"></a>调用摄像头拍照</h3><p>（1）布局写一个Button和ImageView<br>（2）获取Button和ImageView的实例<br><code>Button takePhoto = (Button) findViewById(R.id.take_photo);</code><br><code>picture = (ImageView) findViewById(R.id.picture) ;</code><br>（3）在Button上注册点击事件<br>a.创建一个File对象，用于存储拍下的图片，并将照片存放在SD卡的应用关联缓存目录下，调用getExternalCacheDir()方法得到这个目录<br><code>//创建File对象，用于存储拍照后的图片</code><br><code>File outputImage = new File(getExternalCacheDir(),&quot;output_image.jpg&quot;);</code><br>b.判断，设备系统版本低于Android7.0,就调用Uri的fromFile()方法将File对象转换成Uri对象,这个Uri对象标识着output_image.jpg这张图片的本地真实路径，否则，就调用FileProvider的 getUriForFile()方法将File对象转换成一个封装过的Uri对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (Build.VERSION.SDK_INT &gt;= 24) &#123;</span><br><span class="line">imageUri = FileProvider.getUriForFile(MainActivity.this,</span><br><span class="line">&quot;com.example.cameraalbumtest.fileprovider&quot;,outputImage);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">imageUri = Uri.fromFile(outputImage) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getUriForFile()方法接收3个参数：<br>第一个参数：要求传入Context对象<br>第二个参数：可以是任意唯一的字符串<br>第三个参数：则是我们刚刚创建的File对象<br><strong>之所以要进行这样一层转换，是因为从Android 7.0系统开始，直接使用本地真实路径的Uri被认为是不安全的，会抛出一个FileUriExposedException 异常。而FileProvider则是一种特殊的内容提供器，它使用了和内容提供器类似的机制来对数据进行保护，可以选择性地将封装过的Uri共享给外部，从而提高了应用的安全性。</strong><br>注意，刚才我们是使用startActivityForResult()来启动活动的，因此拍完照后会有结果返回到onActivityResult()方法中。<br>不过现在还没结束,刚才提到了内容提供器,那么我们自然要了，如下所示:</p><p>c.构建出一个Intent对象，将这个Intent的action指定为android.media.action.IMAGE_CAPTURE<br><code>Intent intent = new Intent (&quot;android.media.action.IMAGE_CAPTURE&quot;);</code><br>e.调用Intent的 putExtra()方法指定图片的输出地址<br><code>intent.putExtra(MediaStore.EXTRA_OUTPUT,imageUri) ;</code><br>f.最后调用startActivityForResult()来启动活动<br><code>startActivityForResult(intent,TAKE_PHOTO);</code><br>g.如果拍照成功，就调用BitmapFactory的decodeStream()方法将output_image.jpg这张照片解析成Bitmap对象,然后把它设置到Image-View中显示出来。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if (resultCode == RESULT_OK) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        //将拍摄的照片显示出来</span><br><span class="line">        Bitmap bitmap = BitmapFactory.decodeStream(getContent-Resolver().openInputStream(imageUri)) ;</span><br><span class="line">        picture.setImageBitmap(bitmap) ;</span><br><span class="line">    &#125;catch (FileNotFoundException e)&#123;</span><br><span class="line">        e.printStackTrace( ) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>h.在AndroidManifest.xml中对内容提供器进行注册</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;provider</span><br><span class="line">android:name=&quot;android.support.v4.content.FileProvider&quot;</span><br><span class="line">android:authorities=&quot;com.example.cameraalbumtest.fileprovider&quot;</span><br><span class="line">android:exported=&quot;false&quot;</span><br><span class="line">android:grantUriPermissions=&quot;true&quot;&gt;</span><br><span class="line">&lt;meta-data</span><br><span class="line">android:name=&quot;android.support.FILE_PROVIDER_PATHS&quot;</span><br><span class="line">android:resource=&quot;@xml/file_paths&quot;/&gt;</span><br><span class="line">&lt;/provider&gt;</span><br></pre></td></tr></table></figure><p>android:name 属性的值是固定的<br>android:authorities属性的值必须要和刚才FileProvider.getUriForFile()方法中的第二个参数一致。</p><p>（4）创建@xml/file_paths资源<br>a.右击 res目录→New→Directory，创建一个xml目录<br>b.接着右击xml目录→New→File，创建一个file_paths.xml文件<br>c.然后修改file_paths.xml文件中的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;paths xmlns:android=&quot;http:/ /schemas.android.com/apk/res/android&quot;&gt;</span><br><span class="line">    &lt;external-path name=&quot;my_images&quot; path=&quot;&quot;/&gt;</span><br><span class="line">&lt;/paths&gt;</span><br></pre></td></tr></table></figure><p>external-path就是用来指定Uri共享的，name属性的值可以随便填，path属性的值表示共享的具体路径。这里设置空值就表示将整个SD卡进行共享，当然你也可以仅共享我们存放output_image.jpg这张图片的路径。</p><p><strong>另外还有一点要注意，在Android 4.4系统之前，访问SD卡的应用关联目录也是要声明权限的，从4.4系统开始不再需要权限声明。</strong></p><p>d.在AndroidManifest.xml 中声明一下访问SD卡的权限:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;manifest xmlns:android=&quot;http:/ /schemas.android.com/apk/res/android&quot;</span><br><span class="line">    package=&quot; com.example.cameraalbumtest&quot;&gt;</span><br><span class="line">    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;/&gt;</span><br><span class="line">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure><h3 id="从相册中选择照片"><a href="#从相册中选择照片" class="headerlink" title="从相册中选择照片"></a>从相册中选择照片</h3><p>（1）写个按钮<br>（2）动态申请wRITE_EXTERNAL_STORAGE权限<br><strong>为什么需要申请这个权限呢?因为相册中的照片都是存储在SD卡上的，我们要从SD 卡中读取照片就需要申请这个权限。WRITE_EXTERNAL_STORAGE表示同时授予程序对SD卡读和写的能力。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Button chooseFromAlbum = (Button) findViewById(R.id.choose_from_album);</span><br><span class="line">chooseFromAlbum.setOnClickListener(new View.OnClickListener()&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onClick (View v) &#123;</span><br><span class="line">        if (ContextCompat.checkSelfPermission(MainActivity.this,Manifest.permission.WRITE_EXTERNAL_STORAGE)!= PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class="line">            ActivityCompat.requestPermissions(MainActivity.this, new String[]&#123;Manifest.permission. WRITE_EXTERNAL_STORAGE&#125;. 1);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            openAlbum( );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>（3）调用openAlbum()方法<br>a.先是构建出了一个Intent对象,并将它的action 指定为android.intent.action.GET_CONTENT<br><code>Intent intent = new Intent (&quot;android.intent.action.GET_CONTENT&quot;);</code><br>b.给这个Intent对象设置一些必要的参数<br><code>intent.setType(&quot;image/*&quot;);</code><br>c.调用startActivityForResult()方法打开相册程序选择照片<br><code>startActivityForResult(intent,CHOOSE_PHOTO);</code><br><strong>注意在调用startActivityForResult()方法的时候，我们给第二个参数传入的值变成了CH0OSE_PHOTO，这样当从相册选择完图片回到onActivityResult()方法时，就会进入CH00SE_PHOT0 的case来处理图片。</strong><br>d.判断，如果是4.4及以上系统的手机就调用handleImageOnKitKat()方法来处理图片，否则就调用handleImageBeforeKitKat()方法来处理图片</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">case CHO0SE_PHOTO:</span><br><span class="line">    if (resultCode == RESULT_OK)&#123;</span><br><span class="line">        //判断手机系统版本号</span><br><span class="line">        if(Build.VERSION.sDK_INT&gt;=19)&#123;</span><br><span class="line">            //4.4及以上系统使用这个方法处理图片</span><br><span class="line">            handleImageOnKitKat(data);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            //4.4以下系统使用这个方法处理图片</span><br><span class="line">            handleImageBeforeKitKat(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    break;</span><br></pre></td></tr></table></figure><p><strong>之所以要这样做，是因为Android系统从4.4版本开始，选取相册中的图片不再返回图片真实的Uri了，而是一个封装过的Uri，因此如果是4.4版本以上的手机就需要对这个Uri进行解析才行</strong><br>e.用handleImageOnKitKat()方法，解析这个封装过的Uri,这里有好几种判断情况，如果返回的Uri是document类型的话，那就取出 document id进行处理,如果不是的话,那就使用普通的方式处理。另外,如果Uri的authority是media格式的话, document id还需要再进行一次解析，要通过字符串分割的方式取出后半部分才能得到真正的数字id,取出的id用于构建新的Uri和条件语句,然后把这些值作为参数传入到getImagePath()方法当中，就可以获取到图片的真实路径了,拿到图片的路径之后，再调用displayImage()方法将图片显示到界面上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@TargetApi(19)</span><br><span class="line">private void handleImageOnKitKat(Intent data)&#123;</span><br><span class="line">    String imagePath = null;</span><br><span class="line">    Uri uri = data.getData() ;</span><br><span class="line">    if(DocumentsContract.isDocumentUri(this, uri))&#123;</span><br><span class="line">        //如果是document类型的Uri，则通过document id处理</span><br><span class="line">        String docId = DocumentsContract.getDocumentId(uri);</span><br><span class="line">        if(&quot;com.android.providers.media.documents&quot;.equals(uri.getAuthority()))&#123;</span><br><span class="line">            String id = docId.split(&quot;:&quot;)[1];//解析出数字格式的id</span><br><span class="line">        string selection = Mediastore.Images.Media._ID + &quot;=&quot;+ id;</span><br><span class="line">        imagePath = getImagePath(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,selection);</span><br><span class="line">    &#125;else if (&quot;com.android.providers.downloads.documents&quot;.equals(uri.getAuthority())&#123;</span><br><span class="line">        Uri contentUri = ContentUris.withAppendedId(Uri.parse(&quot;content:// downloads/public_downloads&quot;),Long.valueOf(docId));</span><br><span class="line">        imagePath = getImagePath(contentUri, nul1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else if(&quot;content&quot;.equalsIgnoreCase(uri.getScheme()))&#123;</span><br><span class="line">    //如果是content类型的Uri，则使用普通方式处理</span><br><span class="line">    imagePath = getImagePath(uri, null) ;</span><br><span class="line">&#125;else if(&quot;file&quot;.equalsIgnoreCase(uri.getScheme()))&#123;</span><br><span class="line">    //如果是file类型的Uri，直接获取图片路径即可</span><br><span class="line">    imagePath = uri.getPath( );</span><br><span class="line">&#125;</span><br><span class="line">displayImage( imagePath);//根据图片路径显示图片</span><br></pre></td></tr></table></figure><p>f.相比于handleImageOnKitKat()方法，handleImageBeforeKitKat()方法中的逻辑就要简单得多了,因为它的Uri是没有封装过的,不需要任何解析,直接将Uri传入到getImagePath()方法当中就能获取到图片的真实路径了,最后同样是调用displayImage()方法来让图片显示到界面上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">private void handleImageBeforeKitKat(Intent data)&#123;</span><br><span class="line">    Uri uri = data.getData();</span><br><span class="line">    String imagePath = getImagePath(uri,null);</span><br><span class="line">    displayImage(imagePath);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="播放多媒体文件"><a href="#播放多媒体文件" class="headerlink" title="播放多媒体文件"></a>播放多媒体文件</h2><h3 id="播放音频"><a href="#播放音频" class="headerlink" title="播放音频"></a>播放音频</h3><p>MediaPlayer类常用控制方法：<br>setDataSource()   设置要播放的音频文件的位置<br>prepare()         在开始播放之前调用这个方法完成准备工作<br>start()           开始或继续播放音频<br>pause()           暂停播放音频<br>reset()           将MediaPlayer对象重置到刚刚创建的状态<br>seekTo()          从指定的位置开始播放音频<br>stop()            停止播放音频。调用这个方法后的MediaPlayer对象无法再播放音频<br>release()         释放掉与MediaPlayer对象相关的资源<br>isPlaying()       判断当前MediaPlayer是否正在播放音频<br>getDuration()     获取载入的音频文件的时长</p><p>MediaPlayer工作流程：<br>（1）创建出一个MediaPlayer对象<br>（2）调用setDataSource()方法来设置音频文件的路径<br>（3）调用prepare()方法使 MediaPlayer进入到准备状态<br>（4）调用start()方法就可以开始播放音频<br>（5）调用pause()方法就会暂停播放<br>（6）调用reset()方法就会停止播放。<br>思路步骤：<br>（1）先创建一个 MediaPlayer的实例<br>然后在onCreate()方法中动态申请WRITE_EXTERNAL_STORAGE权限(拥有访问SD卡的权限)，用户同意授权之后就会调用initMediaPlayer()方法为MediaPlayer对象进行初始化操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (ContextCompat.checkSelfPermission(MainActivity.this,Manifest.permission.WRITE_EXTERNAL_STORAGE)!=PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class="line">    ActivityCompat.requestPermissions(MainActivity.this, new String[]&#123;</span><br><span class="line">        Manifest.permission. wRITE_EXTERNAL_STORAGE &#125;,1);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">    initMediaPlayer( ) ; //初始化MediaPlayer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）在onRequestPermissionsResult()方法中，如果用户拒绝了权限申请，那么就调用finish()方法将程序直接关掉,因为如果没有SD卡的访问权限,我们这个程序将什么都干不了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void onRequestPermissionsResult(int requestCode,String[] permissions,int[] grantResults)&#123;</span><br><span class="line">    switch(requestCode)&#123;</span><br><span class="line">        case 1:</span><br><span class="line">            if (grantResults.length &gt; 0 &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class="line">                initMediaPlayer();</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                Toast.makeText(this,&quot;拒绝权限将无法使用程序&quot;,Toast.LENGTH_SHORT).show();</span><br><span class="line">                finish();</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line">        default:</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）在initMediaPlayer()方法中，首先是通过创建一个File对象来指定音频文件的路径，从这里可以看出，我们需要事先在SD卡的根目录下放置一个名为music.mp3的音频文件。后面依次调用了setDataSource()方法和prepare()方法，为MediaPlayer做好了播放前的准备。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">private void initMediaPlayer() &#123;</span><br><span class="line">    try&#123;</span><br><span class="line">        File file = new File(Environment.getExternalStorageDirectory(),&quot;music.mp3&quot;);</span><br><span class="line">        mediaPlayer.setDataSource(file.getPath());//指定音频文件的路径</span><br><span class="line">        mediaPlayer.prepare();//让MediaPlayer进入到准备状态 </span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（4）接下来我们看一下各个按钮的点击事件中的代码<br>a.当点击Play按钮时会进行判断，如果当前MediaPlayer没有正在播放音频，则调用start()方法开始播放</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">case R.id.play:</span><br><span class="line">    if(!mediaPlayer.isPlaying())&#123;</span><br><span class="line">        mediaPlayer.start();//开始播放</span><br><span class="line">    &#125;</span><br><span class="line">    break;</span><br></pre></td></tr></table></figure><p>b.当点击Pause按钮时会判断，如果当前MediaPlayer 正在播放音频,则调用pause()方法暂停播放</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">case R.id.pause:</span><br><span class="line">    if(mediaPlayer.isPlaying())&#123;</span><br><span class="line">        mediaPlayer.pause();//暂停播放</span><br><span class="line">    &#125;</span><br><span class="line">break;</span><br></pre></td></tr></table></figure><p>c.当点击Stop按钮时会判断,如果当前MediaPlayer正在播放音频,则调用reset()方法将MediaPlayer重置为刚刚创建的状态，然后重新调用一遍initMediaPlayer()方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">case R.id.stop:</span><br><span class="line">    if(mediaPlayer.isPlaying())&#123;</span><br><span class="line">        mediaPlayer.reset();//停止播放</span><br><span class="line">        initMediaPlayer();</span><br><span class="line">    &#125;</span><br><span class="line">    break;</span><br><span class="line">default:</span><br><span class="line">    break;</span><br></pre></td></tr></table></figure><p>（5）在onDestroy()方法中，我们还需要分别调用stop()方法和release()方法，将与MediaPlayer相关的资源释放掉</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    protected void onDestroy()&#123;</span><br><span class="line">        super.onDestroy();</span><br><span class="line">        if(mediaPlayer!= null)&#123;</span><br><span class="line">        mediaPlayer.stop();</span><br><span class="line">        mediaPlayer.release();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（6）在AndroidManifest.xm1文件中声明用到的权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android</span><br><span class="line">    package=&quot;com.example.playaudiotest&quot;&gt;</span><br><span class="line">    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;/&gt;</span><br><span class="line">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure><h3 id="播放视频"><a href="#播放视频" class="headerlink" title="播放视频"></a>播放视频</h3><p>（1）在onCreate()方法中同样进行了一个运行时权限处理,因为视频文件将会放在SD卡上,当用户同意授权了之后就会调用initVideoPath()方法来设置视频文件的路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if(ContextCompat.checkSelfPermission(MainActivity.this,Manifest.permission.wRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class="line">    ActivityCompat.requestPermissions(MainActivity.this,new String[]&#123;</span><br><span class="line">        Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;,1);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    initVideoPath(); //初始化MediaPlayer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）事先在SD卡的根目录下放置一个名为movie.mp4的视频文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">private void initVideoPath()&#123;</span><br><span class="line">    File file = new File(Environment.getExternalStorageDirectory(),&quot;movie.mp4&quot;);</span><br><span class="line">    videoView.setVideoPath(file.getPath());//指定视频文件的路径</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）在onRequestPermissionsResult()方法中，如果用户拒绝了权限申请，那么就调用finish()方法将程序直接关掉,因为如果没有SD卡的访问权限,我们这个程序将什么都干不了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void onRequestPermissionsResult(int requestCode,String[] permissions,int[] grantResults)&#123;</span><br><span class="line">    switch(requestCode)&#123;</span><br><span class="line">        case 1:</span><br><span class="line">            if (grantResults.length &gt; 0 &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class="line">                initMediaPlayer();</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                Toast.makeText(this,&quot;拒绝权限将无法使用程序&quot;,Toast.LENGTH_SHORT).show();</span><br><span class="line">                finish();</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line">        default:</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（4）接下来我们看一下各个按钮的点击事件中的代码<br>a.当点击Play按钮时会进行判断，如果当前并没有正在播放视频，则调用start()方法开始播放</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">case R.id.play:</span><br><span class="line">    if(!videoView.isPlaying())&#123;</span><br><span class="line">        videoView.start();//开始播放</span><br><span class="line">    &#125;</span><br><span class="line">break;</span><br></pre></td></tr></table></figure><p>b.当点击Pause按钮时会判断，如果当前视频正在播放，则调用pause()方法暂停播放</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">case R.id.pause:</span><br><span class="line">    if(videoView.isPlaying())&#123;</span><br><span class="line">        videoView.pause();//暂停播放</span><br><span class="line">    &#125;</span><br><span class="line">break;</span><br></pre></td></tr></table></figure><p>c.当点击Replay按钮时会判断，如果当前视频正在播放，则调用resume()方法从头播放视频</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">case R.id.replay:</span><br><span class="line">    if(videoView.isPlaying())&#123;</span><br><span class="line">        videoView.resume();//重新播放</span><br><span class="line">    &#125;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（6）在onDestroy()方法中，我们还需要调用一下suspend()方法，将VideoView所占用的资源释放掉</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void onDestroy()&#123;</span><br><span class="line">    super.onDestroy() ;</span><br><span class="line">    if(videoView != null)&#123;</span><br><span class="line">        videoView.suspend();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（7）在AndroidManifest.xml文件中声明用到的权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;manifest xmlns:android=&quot;http:/ /schemas.android.com/apk/res/android&quot;</span><br><span class="line">    package=&quot;com.example.playvideotest&quot;&gt;</span><br><span class="line">    &lt;uses-permission android:name=&quot;android.permission.wRITE_EXTERNAL_STORAGE&quot;/&gt;</span><br><span class="line">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用通知&quot;&gt;&lt;a href=&quot;#使用通知&quot; class=&quot;headerlink&quot; title=&quot;使用通知&quot;&gt;&lt;/a&gt;使用通知&lt;/h1&gt;&lt;h2 id=&quot;通知的基本用法&quot;&gt;&lt;a href=&quot;#通知的基本用法&quot; class=&quot;headerlink&quot; title=&quot;通知的</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>数据存储</title>
    <link href="https://anbyss.github.io/2021/09/09/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
    <id>https://anbyss.github.io/2021/09/09/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/</id>
    <published>2021-09-09T07:16:10.000Z</published>
    <updated>2021-09-15T15:47:09.338Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件存储"><a href="#文件存储" class="headerlink" title="文件存储"></a>文件存储</h1><h2 id="数据储存到文件中"><a href="#数据储存到文件中" class="headerlink" title="数据储存到文件中"></a>数据储存到文件中</h2><h3 id="步骤思路"><a href="#步骤思路" class="headerlink" title="步骤思路"></a>步骤思路</h3><p>（1）通过openFileOutput()方法得到一个FileOutputStream对象<br><code>out = openFileOutput ( &quot;文件名&quot; , Context.MODE_PRIVATE);</code><br>第二个参数是操作模式，有四种，常用的两种，MODE_PRIVATE（覆盖），MODE_APPEND（追加）</p><p>（2）借此构造一个OutputStreamWriter对象<br><code>new OutputStreamWriter(out)</code></p><p>（3）再借OutputStreamWriter构造出一个BufferedWriter对象<br><code>writer = new BufferedWriter(new OutputStreamWriter(out));</code></p><p>（4）通过BufferedWriter将数据写入文件<br><code>writer.write(data) ;</code></p><h3 id="完整代码示例"><a href="#完整代码示例" class="headerlink" title="完整代码示例"></a>完整代码示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public void save() &#123;</span><br><span class="line">    String data = &quot;Data to save&quot; ;</span><br><span class="line">    FileOutputStream out = null;</span><br><span class="line">    BufferedWriter writer = null;</span><br><span class="line">    try &#123;</span><br><span class="line">        out = openFileOutput ( &quot;data&quot; , Context.MODE_PRIVATE);</span><br><span class="line">        writer = new BufferedWriter(new OutputStreamWriter(out) );</span><br><span class="line">        writer.write(data) ;</span><br><span class="line">    &#125;catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace( );</span><br><span class="line">    &#125;finally &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (writer != null) &#123;</span><br><span class="line">            writer.close( ) ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        e.printStackTrace( );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="从文件中读取数据"><a href="#从文件中读取数据" class="headerlink" title="从文件中读取数据"></a>从文件中读取数据</h2><h3 id="步骤思路-1"><a href="#步骤思路-1" class="headerlink" title="步骤思路"></a>步骤思路</h3><p>（1）通过openFileInput获取一个FileInputStream对象<br><code>in = openFileInput ( &quot;文件名&quot; ) ;</code></p><p>（2）借此构建出一个InputStreamReader对象<br><code>new InputStreamReader(in)</code></p><p>（3）接着借此构建出一个BufferedReader对象<br><code>reader = new BufferedReader(new InputStreamReader(in));</code></p><p>（4）通过BufferedReader对象读取数据，存放在一个StringBuilder对象中，返回读取内容<br><code>StringBuilder content = new StringBuilder( );</code><br><code>content.append (line) ;</code></p><h3 id="完整代码示例-1"><a href="#完整代码示例-1" class="headerlink" title="完整代码示例"></a>完整代码示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public String load( ) &#123;</span><br><span class="line">    FileInputStream in = null;</span><br><span class="line">    BufferedReader reader = null;</span><br><span class="line">    StringBuilder content = new StringBuilder( );</span><br><span class="line">    try &#123;</span><br><span class="line">        in = openFileInput ( &quot;data&quot; ) ;</span><br><span class="line">        reader = new BufferedReader(new InputStreamReader(in));</span><br><span class="line">        String line = &quot;&quot;;</span><br><span class="line">        while ( ( line = reader. readLine()) != null) &#123;</span><br><span class="line">            content.append (line) ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;catch ( IOException e) &#123;</span><br><span class="line">        e.printStackTrace( ) ;</span><br><span class="line">    &#125;finally &#123;</span><br><span class="line">        if ( reader != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                reader.close();</span><br><span class="line">            &#125;catch ( IOException e) &#123;</span><br><span class="line">                e.printStackTrace( );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return content.toString( );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="SharedPreference存储"><a href="#SharedPreference存储" class="headerlink" title="SharedPreference存储"></a>SharedPreference存储</h1><h2 id="数据储存到SharedPreference中"><a href="#数据储存到SharedPreference中" class="headerlink" title="数据储存到SharedPreference中"></a>数据储存到SharedPreference中</h2><h3 id="步骤思路-2"><a href="#步骤思路-2" class="headerlink" title="步骤思路"></a>步骤思路</h3><p>（1）获取SharedPreferences对象(三种方法)</p><pre><code>getSharedPreferences(&quot;data&quot;,MODE_PRIVATE)第一个参数：文件名第二个参数：操作模式，只有MODE_PRIVATEgetPreferences(MODE_PRIVATE)第一个参数：操作模式，只有MODE_PRIVATE，自动将当前活动类名作为文件名getDefaultSharedPreferences()调用SharedPreferences对象的exit（）方法获取对象</code></pre><p>（2）向该对象中添加数据<br>    调用apply（）方法提交储存数据<br>    <code>editor.apply( );</code></p><h3 id="完整代码示例-2"><a href="#完整代码示例-2" class="headerlink" title="完整代码示例"></a>完整代码示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate ( Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState) ;</span><br><span class="line">        setContentView(R.layout.activity_main) ;</span><br><span class="line">        Button saveData = (Button) findViewById(R.id.save_data) ;</span><br><span class="line">        saveData.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                SharedPreferences.Editor editor = getSharedPreferences(&quot;data&quot;,</span><br><span class="line">                    MODE_PRIVATE).edit();</span><br><span class="line">                editor.putString ( &quot;name&quot; ,&quot;Tom&quot; ) ;</span><br><span class="line">                editor.putInt ( &quot;age&quot; , 28);</span><br><span class="line">                editor.putBoolean ( &quot;married&quot; , false) ;</span><br><span class="line">                editor.apply( );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="从SharedPreference中读取数据"><a href="#从SharedPreference中读取数据" class="headerlink" title="从SharedPreference中读取数据"></a>从SharedPreference中读取数据</h2><h3 id="步骤思路-3"><a href="#步骤思路-3" class="headerlink" title="步骤思路"></a>步骤思路</h3><p>（1）先获取SharedPreferences对象<br><code>SharedPreferences pref = getSharedPreferences(&quot;data&quot;，MODE_PRIVATE);</code></p><p>（2）用各种数据类型的get方法读取相应的数据<br><code>string name = pref.getString ( &quot;name&quot; ,&quot;&quot;) ;</code>（<strong>字符</strong>）<br><code>int age = pref.getInt ( &quot;age&quot;, 0);</code>（<strong>数字</strong>）<br><code>boolean married = pref.getBoolean ( &quot;married&quot;, false);</code>（<strong>布尔</strong>）<br>这些get方法都接收两个参数：<br>第一个参数是键，传入存储数据时使用的键就可以得到相应的值了。<br>第二个参数是默认值，即表示当传入的键找不到对应的值时会以什么样的默认值进行返回。</p><h3 id="完整代码示例-3"><a href="#完整代码示例-3" class="headerlink" title="完整代码示例"></a>完整代码示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate( Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate( savedInstanceState) ;</span><br><span class="line">        setContentView (R.layout.activity_main) ;</span><br><span class="line">        ······</span><br><span class="line">        Button restoreData = (Button) findViewById(R.id.restore_data);</span><br><span class="line">        restoreData.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                SharedPreferences pref = getSharedPreferences(&quot;data&quot;,MODE_PRIVATE);</span><br><span class="line">                String name = pref.getString( &quot;name&quot; ,&quot;&quot;) ;</span><br><span class="line">                int age = pref.getInt(&quot;age&quot;,0);</span><br><span class="line">                boolean married = pref.getBoolean( &quot;married&quot;, false);</span><br><span class="line">                Log.d( &quot;MainActivity&quot;, &quot;name is &quot; + name) ;</span><br><span class="line">                Log.d( &quot;MainActivity&quot;, &quot;age is &quot; +age) ;</span><br><span class="line">                Log.d (&quot;MainActivity&quot;, &quot;married is &quot; +married) ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="SQLite数据库存储"><a href="#SQLite数据库存储" class="headerlink" title="SQLite数据库存储"></a>SQLite数据库存储</h1><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><h3 id="步骤思路-4"><a href="#步骤思路-4" class="headerlink" title="步骤思路"></a>步骤思路</h3><p>（1）SQLiteOpenHelper抽象类<br>两个抽象方法:onCreate()和onUpgrade()<br>两个实例方法:getReadableDatabase()和getWritableDatabase()<br>一个构造方法:dpHelper = new MyDatabaseHelper(this,”BookStore.db”,null,1);<br>            第一个参数：Context<br>            第二个参数：数据库名<br>            第三个参数：查询数据返回的自定义的Cursor，一般传入null<br>            第四个参数：当前数据库版本号，可用于数据库的升级操作</p><p>（2）建表语句（SQL）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table Book(</span><br><span class="line">    id integer primary key autoincrement,</span><br><span class="line">    author text,</span><br><span class="line">    price real,</span><br><span class="line">    pages integer,</span><br><span class="line">    name text)</span><br></pre></td></tr></table></figure><p>integer:整型<br>real:浮点型<br>text:文本类型<br>blob:二进制类型</p><p>（3）建表操作<br>a.新建一个类继承自SQLiteOpenHelper<br>b.把建表语句定义成一个字符串常量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static final String CREATE_BOOK = &quot;create table Book (&quot;</span><br><span class="line">            + &quot;id integer primary key autoincrement, &quot;</span><br><span class="line">            + &quot;author text, &quot;</span><br><span class="line">            + &quot;price real, &quot; + &quot;pages integer, &quot; + &quot;name text)&quot;;</span><br></pre></td></tr></table></figure><p>c.在onCreate中调用SQLiteDatabase的execSQL()执行建表语句<br><code>db.execSQL(CREATE_BOOK);</code><br>d.布局自己写，加个按钮什么的<br>e.在主活动的onCreate中构造一个MyDatabaseHelper对象，用上之前的构造方法<br><code>dpHelper = new MyDatabaseHelper(this,&quot;BookStore.db&quot;,null,1);</code><br>f.在按钮的点击事件中调用getWritableDatabase()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Button createDatabase = (Button) findViewById(R.id.create_database);</span><br><span class="line">        createDatabase.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                dbHelper.getWritableDatabase();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><h2 id="升级数据库"><a href="#升级数据库" class="headerlink" title="升级数据库"></a>升级数据库</h2><h3 id="步骤思路-5"><a href="#步骤思路-5" class="headerlink" title="步骤思路"></a>步骤思路</h3><p>（1）类似创建数据库先建一张表<br>（2）解决数据库已经存在，第二张表创建失败的问题(用SQLiteOpenHelper的升级功能)<br>a.在onUpgrade()中加入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.execSQL(&quot;drop table if exists Book&quot;);</span><br><span class="line">db.execSQL(&quot;drop table if exists category&quot;) ;</span><br><span class="line">onCreate(db);</span><br></pre></td></tr></table></figure><p>b.修改版本号(将版本号从1修改成2)<br><code>dpHelper = new MyDatabaseHelper(this,&quot;BookStore.db&quot;,null,2);</code></p><h2 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h2><p>（1）在布局里加一个按钮<br>（2）写按钮的点击事件<br>a.先获取一个SQLiteDatabase对象<br><code>SQLiteDatabase db = dbHelper.getWritableDatabase( );</code><br>b.然后用ContentValues对添加的数据进行组装<br><code>ContentValues values = new ContentValues();</code><br>c.调用insert()方法将数据添加到表中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> //开始组装第一条数据</span><br><span class="line">    values.put( &quot;name&quot; , &quot;The Da Vinci Code&quot;);</span><br><span class="line">    values.put( &quot;author&quot;, &quot;Dan Brown&quot;);</span><br><span class="line">    values.put( &quot;pages&quot; ,454) ;</span><br><span class="line">    values.put( &quot;price&quot;,16.96) ;</span><br><span class="line">    db.insert(&quot;Book&quot;, null, values) ;//插入第一条数据</span><br><span class="line">    values.clear();</span><br><span class="line">//开始组装第二条数据</span><br><span class="line">    values.put( &quot;name&quot;, &quot;The Lost Symbol&quot;) ;</span><br><span class="line">    values.put( &quot;author&quot; , &quot;Dan Brown&quot;) ;</span><br><span class="line">    values.put( &quot;pages&quot;, 510);</span><br><span class="line">    values.put( &quot;price&quot;, 19.95);</span><br><span class="line">    db.insert( &quot;Book&quot;, null, values);//插入第二条数据</span><br></pre></td></tr></table></figure><h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><p>（1）在布局里加一个按钮<br>（2）写按钮的点击事件<br>a.先获取一个SQLiteDatabase对象<br><code>SQLiteDatabase db = dbHelper.getWritableDatabase( );</code><br>b.然后用ContentValues对添加的数据进行组装<br><code>ContentValues values = new ContentValues();</code><br>c.指定新数据，用update()更新数据<br>    <code>values.put( &quot;price&quot;,10.99) ;</code><br>    <code>db.update(&quot;Book&quot;, values,&quot;name = ?&quot;,new String[] &#123; &quot;The Da Vinci Code&quot;&#125;);</code><br>    第三个参数对应的是SQL语句的where部分，表示更新所有name等于?的行，而?是一个占位符<br>    第四个参数提供的一个字符串数组为第三个参数中的每个占位符指定相应的内容</p><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><p>（1）在布局里加一个按钮<br>（2）写按钮的点击事件<br>a.先获取一个SQLiteDatabase对象<br><code>SQLiteDatabase db = dbHelper.getWritableDatabase( );</code><br>b.用delete()删除指定数据<br><code>db.delete(&quot;Book&quot;, &quot;pages &gt; ?&quot;, new String[]&#123;&quot;500&quot; &#125;);</code><br>第二、三个参数表示删掉页数大于500的书</p><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><p>（1）在布局里加一个按钮<br>（2）写按钮的点击事件<br>a.先获取一个SQLiteDatabase对象<br><code>SQLiteDatabase db = dbHelper.getWritableDatabase( );</code><br>b.用query()方法进行查询<br><code>Cursor cursor = db.query(&quot;Book&quot;, null, null, null, null, null, null);</code><br>    第一个参数：表名，表示我们希望从哪张表中查询数据。<br>    第二个参数：用于指定去查询哪几列，如果不指定则默认查询所有列。<br>    第三、第四个参数用于约束查询某一行或某几行的数据,不指定则默认查询所有行的数据。<br>    第五个参数用于指定需要去group by的列，不指定则表示不对查询结果进行group by操作。<br>    第六个参数用于对group by之后的数据进行进一步的过滤，不指定则表示不进行过滤。<br>    第七个参数用于指定查询结果的排序方式，不指定则表示使用默认的排序方式。</p><p>c.查询完之后就得到了一个Cursor对象,接着调用moveToFirst()方法将数据的指针移动到第一行的位置，然后进入了一个循环当中，去遍历查询到的每一行数据。<br><code>if (cursor.moveToFirst())</code><br>d.在这个循环中通过Cursor的getColumnIndex()获取某一列在表中对应的位置索引,然后将这个索引传入到相应的取值方法中，得到读取到的数据。<br><code> String name = cursor.getString(cursor.getColumnIndex(&quot;name&quot;));</code><br>e.接着我们使用Log的方式将取出的数据打印出来，检查一下读取工作有没有成功完成。<br><code>Log.d(&quot;MainActivity&quot;, &quot;book name is &quot; + name);</code><br>f.最后调用close()方法来关闭Cursor。<br><code>cursor.close();</code></p><h2 id="使用SQL操作数据库"><a href="#使用SQL操作数据库" class="headerlink" title="使用SQL操作数据库"></a>使用SQL操作数据库</h2><p>（1）添加数据的方法如下:<br>    db.execSQL(“insert into Book (name，author，pages, price) values(?，?，?，?)”，new String[] { “The Da Vinci Code”,”Dan Brown”，”454”，”16.96”});<br>    db.execSQL(“insert into Book (name，author，pages，price) values(?，?，?，?)”，new String[] { “The Lost Symbol”,”Dan Brown”, “510”，”19.95” });</p><p>（2）更新数据的方法如下:<br>    db.execSQL ( “update Book set price = ? where name = ?” ,new String[] { “10.99”,”The Da Vinci code” })；</p><p>（3）删除数据的方法如下:<br>    db.execSQL( “delete from Book where pages &gt; ?”,new String[ ] { “500”});</p><p>（4）查询数据的方法如下:<br>    db.rawQuery ( “select * from Book” ,null);</p><h1 id="使用LitePal操作数据库"><a href="#使用LitePal操作数据库" class="headerlink" title="使用LitePal操作数据库"></a>使用LitePal操作数据库</h1><h2 id="配置LitePal"><a href="#配置LitePal" class="headerlink" title="配置LitePal"></a>配置LitePal</h2><p>（1）编辑app/build.gradle文件，在dependencies闭包中添加<br><code>compile &#39;org.litepal.android:core:1.3.2&#39;</code><br>（2）配置litepal.xml文件<br>a.右击app/src/main目录→New→Directory，创建一个assets目录<br>b.然后在 assets目录下再新建一个litepal.xml文件<br>c.接着编辑litepal.xml文件中的内容，如下所示:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;litepal&gt;</span><br><span class="line">    &lt;dbname value=&quot;BookStore&quot; &gt;&lt;/ dbname&gt;</span><br><span class="line">    &lt;version value=&quot;1&quot; &gt;&lt;/version&gt;</span><br><span class="line">    &lt;list&gt;</span><br><span class="line">    &lt;/list&gt;</span><br><span class="line">&lt;/litepal&gt;</span><br></pre></td></tr></table></figure><p>(3)配置LitePalApplication<br>修改AndroidManifest.xml中的代码，在application中添加<br><code>android:name=&quot;org.litepal.LitePalApplication&quot;</code></p><h2 id="创建和升级数据库"><a href="#创建和升级数据库" class="headerlink" title="创建和升级数据库"></a>创建和升级数据库</h2><p>（1）定义一个Book类，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Book extends DataSupport&#123;</span><br><span class="line">    private int id;</span><br><span class="line">    ···</span><br><span class="line"></span><br><span class="line">    public int getId()&#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setId(int id)&#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    ···</span><br></pre></td></tr></table></figure><p>（2）修改litepal.xml中的代码<br>在<list></list>中添加<br><code>&lt;mapping class=&quot;com.example.admin.litepaltest.Book&quot;&gt;&lt;/mapping&gt;</code></p><p>（3）在布局里加一个按钮<br>（4）写按钮的点击事件，调用Connector.getDatabase();，自动创建数据库<br>（5）升级数据库只要在表中添加数据，再添加一张表只要版本号改掉，再添加<br><code>&lt;mapping class=&quot;com.example.admin.litepaltest.Category&quot;&gt;&lt;/mapping&gt;</code></p><h2 id="使用LitePal添加数据"><a href="#使用LitePal添加数据" class="headerlink" title="使用LitePal添加数据"></a>使用LitePal添加数据</h2><p>（1）让Book表继承自DataSupport(增删改查的必需操作)<br>（2）在布局里加一个按钮<br>（3）写按钮的点击事件<br>a.调用Book类中的各种set方法对数据进行设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Book book = new Book();</span><br><span class="line">book.setName ( &quot;The Da Vinci code&quot; );</span><br><span class="line">book.setAuthor( &quot;Dan Brown&quot; );</span><br><span class="line">book.setPages (454);</span><br><span class="line">book.setPrice ( 16.96);</span><br><span class="line">book.setPress ( &quot;Unknow&quot; );</span><br></pre></td></tr></table></figure><p>b.调用book.save()就能添加数据了<br>    <code>book.save();</code></p><h2 id="使用LitePal更新数据"><a href="#使用LitePal更新数据" class="headerlink" title="使用LitePal更新数据"></a>使用LitePal更新数据</h2><p>（1）让Book表继承自DataSupport<br>（2）在布局里加一个按钮<br>（3）写按钮的点击事件<br>a.new出一个book实例<br>    <code>Book book = new Book();</code><br>b.调用setPrice()和setPress()等方法更新数据<br>    <code>book.setPrice(14.95);</code><br>    <code>book.setPress(&quot;Anchor&quot;);</code><br>c.调用updateAll()方法执行更新操作<br>    <code>book.updateAll(&quot;name = ? and author = ?&quot;,&quot;The Lost Symbol&quot;,&quot;Dan Brown&quot;);</code><br><strong>如果我们想把数据库表中的pages列更新成0，直接调用book.setPages(0)是不可以的，因为即使不调用这行代码,pages字段本身也是0，LitePal此时是不会对这个列进行更新的。对于所有想要将为数据更新成默认值的操作，LitePal统一提供了一个setToDefault()方法，然后传入相应的列名就可以实现了。比如我们可以这样写:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Book book = new Book ( );</span><br><span class="line">book.setToDefault( &quot;pages&quot; ) ;</span><br><span class="line">book.updateAll();</span><br></pre></td></tr></table></figure><h2 id="使用LitePal删除数据"><a href="#使用LitePal删除数据" class="headerlink" title="使用LitePal删除数据"></a>使用LitePal删除数据</h2><p>（1）让Book表继承自DataSupport<br>（2）在布局里加一个按钮<br>（3）写按钮的点击事件，添加<br><code>DataSupport.deleteAll(Book.class, &quot;price &lt; ?&quot;, &quot;15&quot;);</code><br>Book.class意味着删除book表中的数据<br>“price &lt; ?”, “15”意味着删除的对象是价格低于15的书</p><h2 id="使用LitePal查询数据"><a href="#使用LitePal查询数据" class="headerlink" title="使用LitePal查询数据"></a>使用LitePal查询数据</h2><p>（1）让Book表继承自DataSupport<br>（2）在布局里加一个按钮<br>（3）写按钮的点击事件，添加<br><code>List&lt;Book&gt; books = DataSupport.findAll(Book.class);</code></p><p><strong>除了findAll()方法之外，LitePal还提供了很多其他非常有用的查询API</strong><br>（1）比如我们想要查询Book表中的第一条数据就可以这样写:<br><code>Book firstBook = DataSupport.findFirst(Book.class) ;</code><br>（2）查询Book表中的最后一条数据就可以这样写:<br><code>Book lastBook = DataSupport.findLast ( Book.class) ;</code></p><p><strong>我们还可以通过连缀查询来定制更多的查询功能</strong><br>（1）select()方法用于指定查询哪几列的数据，对应了SQL当中的select关键字。<br>    比如只查name和 author这两列的数据，就可以这样写:<br>    <code>List&lt;Book&gt; books = DataSupport.select( &quot; name&quot;，&quot;author&quot; ).find(Book.class) ;</code><br>（2）where()方法用于指定查询的约束条件，对应了SQL当中的where关键字。<br>    比如只查页数大于400的数据，就可以这样写:<br>    <code>List&lt;Book&gt; books = DataSupport.where(&quot;pages &gt; ?&quot;，&quot;400&quot;).find(Book.class) ;</code><br>（3）order()方法用于指定结果的排序方式，对应了SQL当中的order by 关键字。<br>    比如将查询结果按照书价从高到低排序，就可以这样写:<br>    <code>List&lt;Book&gt; books = DataSupport.order( &quot;price desc&quot; ).find(Book.class) ;</code><br>    其中 desc表示降序排列，asc或者不写表示升序排列。<br>（4）limit()方法用于指定查询结果的数量。<br>    比如只查表中的前3条数据，就可以这样写:<br>    <code>List&lt;Book&gt; books = DataSupport.limit(3 ).find( Book.class);</code><br>（5）offset()方法用于指定查询结果的偏移量。<br>    比如查询表中的第2条、第3条、第4条数<br>    <code>List&lt;Book&gt; books = DataSupport.limit(3).offset(1).find(Book.class);</code></p><p><strong>可以对这5个方法进行任意的连缀组合，来完成一个比较复杂的查询操作:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Book&gt; books = DataSupport.select( &quot;name&quot;,&quot;author&quot;, &quot;pages&quot; )</span><br><span class="line">                              .where( &quot;pages &gt; ?&quot;,&quot;400&quot;)</span><br><span class="line">                              .order( &quot;pages &quot; )</span><br><span class="line">                              .limit ( 10)</span><br><span class="line">                              .offset ( 10)</span><br><span class="line">                              .find (Book.class) ;</span><br></pre></td></tr></table></figure><p>这段代码就表示，查询Book表中第11~20条满足页数大于400这个条件的 name、author和pages这3列数据,并将查询结果按照页数升序排列。</p><p><strong>LitePal仍然支持使用原生的SQL来进行查询:</strong><br><code>cursor c = DataSupport.findBySQL (&quot;select * from Book where pages &gt; ? and price &lt; ?&quot;,&quot;400&quot; , &quot;20&quot;);</code><br>调用DataSupport.findBySQL()方法来进行原生查询，其中第一个参数用于指定SQL语句，后面的参数用于指定占位符的值。<br>！！！注意findBySQL()方法返回的是一个Cursor对象，接下来需要通过前面所学方式将数据一一取出。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;文件存储&quot;&gt;&lt;a href=&quot;#文件存储&quot; class=&quot;headerlink&quot; title=&quot;文件存储&quot;&gt;&lt;/a&gt;文件存储&lt;/h1&gt;&lt;h2 id=&quot;数据储存到文件中&quot;&gt;&lt;a href=&quot;#数据储存到文件中&quot; class=&quot;headerlink&quot; title=&quot;数</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>广播机制</title>
    <link href="https://anbyss.github.io/2021/08/29/%E5%B9%BF%E6%92%AD%E6%9C%BA%E5%88%B6/"/>
    <id>https://anbyss.github.io/2021/08/29/%E5%B9%BF%E6%92%AD%E6%9C%BA%E5%88%B6/</id>
    <published>2021-08-29T12:06:22.342Z</published>
    <updated>2021-09-09T08:50:43.559Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、广播机制简介"><a href="#一、广播机制简介" class="headerlink" title="一、广播机制简介"></a>一、广播机制简介</h1><p>1.标准广播<br>特点：不可截断，一对多，效率高<br>优点：自由控制注册和注销，灵活性好<br>缺点：必须程序启动才能接收广播，所以逻辑写在onCreate中</p><p>2.有序广播<br>特点：可截断，一个接一个，有优先级<br>优点：程序未启动也能接收广播<br>缺点：还没发现</p><h1 id="二、接收系统广播"><a href="#二、接收系统广播" class="headerlink" title="二、接收系统广播"></a>二、接收系统广播</h1><h2 id="动态注册监听网络变化"><a href="#动态注册监听网络变化" class="headerlink" title="动态注册监听网络变化"></a>动态注册监听网络变化</h2><p>(1)注册广播的方式有两种：<br>在代码中注册(动态注册)<br>在AndroidManifest.xml中注册(静态注册)</p><p>(2)创建一个广播接收器<br>新建一个类→继承自Broadcast-Receiver→重写父类的onReceive()方法</p><p>(3)动态注册的方式写一个监听网络变化的程序</p><h2 id="静态注册实现开机启动"><a href="#静态注册实现开机启动" class="headerlink" title="静态注册实现开机启动"></a>静态注册实现开机启动</h2><p>(1)通过Android Studio提供的快捷方式来创建一个广播接收器，右击com.example.broadcasttest包→New→Other→Broadcast Receiver，勾选两个属性</p><p>(2)AndroidManifest.xml中添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot; /&gt;（声明权限）</span><br><span class="line">&lt;intent-filter&gt;</span><br><span class="line">&lt;action android:name=&quot;android.intent.action.BOOT_COMPLETED&quot; /&gt;（添加相应的action）</span><br><span class="line">&lt;/intent-filter&gt;</span><br></pre></td></tr></table></figure><h1 id="三、发送自定义广播"><a href="#三、发送自定义广播" class="headerlink" title="三、发送自定义广播"></a>三、发送自定义广播</h1><h2 id="发送标准广播"><a href="#发送标准广播" class="headerlink" title="发送标准广播"></a>发送标准广播</h2><p>(1)新建一个广播接收器</p><p>(2)添加action<br><code>&lt;action android:name=&quot;com.example.broadcasttest.MY_BROADCAST&quot; /&gt;</code></p><p>(3)写一个button</p><p>(4)构建Intent对象，调用sendBroadcast（）发送广播，此时就是标准广播</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;intent-filter&gt;</span><br><span class="line">    &lt;action android:name=&quot;com.example.broadcasttest.MY_BROADCAST&quot; /&gt;</span><br><span class="line">&lt;/intent-filter&gt;</span><br></pre></td></tr></table></figure><p>通过这个可以让多个项目接收此广播器的都有反应</p><h2 id="发送有序广播"><a href="#发送有序广播" class="headerlink" title="发送有序广播"></a>发送有序广播</h2><p>(1)在标准广播的基础上，只要改动一行代码<br>将sendBroadcast (intent);改成sendOrderedBroadcast (intent，null);</p><p><strong>sendOrderedBroadcast()方法接收两个参数，第一个参数仍然是Intent，第二个参数是一个与权限相关的字符串，这里传入null就行了</strong></p><p>(2)设置优先级</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;intent-filter android:priority=&quot;100&quot;&gt;</span><br><span class="line">    &lt;action android:name=&quot;com.example.broadcasttest.MY_BROADCAST&quot; /&gt;</span><br><span class="line">&lt;/intent-filter&gt;</span><br></pre></td></tr></table></figure><p>(3)选择是否允许广播传递<br>在OnReceive()中调用abortBroadcast();表示将这条广播截断，后面的广播接收不到这条广播</p><h1 id="四、使用本地广播（解决安全性问题）"><a href="#四、使用本地广播（解决安全性问题）" class="headerlink" title="四、使用本地广播（解决安全性问题）"></a>四、使用本地广播（解决安全性问题）</h1><p>1.本地广播的代码跟动态注册很像<br>2.是通过LocalBroadcastManager的getInstance()方法得到了它的一个实例<br>3.在注册广播接收器的时候调用的是LocalBroadcastManager的registerReceiver()方法<br>4.发送广播的时候调用的是LocalBroadcastManager的sendBroadcast()方法</p><p>本地广播的优势：<br>(1)可以明确地知道正在发送的广播不会离开我们的程序，因此不必担心机密数据泄漏。<br>(2)其他的程序无法将广播发送到我们程序的内部，因此不需要担心会有安全漏洞的隐患。<br>(3)发送本地广播比发送系统全局广播将会更加高效。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、广播机制简介&quot;&gt;&lt;a href=&quot;#一、广播机制简介&quot; class=&quot;headerlink&quot; title=&quot;一、广播机制简介&quot;&gt;&lt;/a&gt;一、广播机制简介&lt;/h1&gt;&lt;p&gt;1.标准广播&lt;br&gt;特点：不可截断，一对多，效率高&lt;br&gt;优点：自由控制注册和注销，灵活性好</summary>
      
    
    
    
    
  </entry>
  
</feed>
